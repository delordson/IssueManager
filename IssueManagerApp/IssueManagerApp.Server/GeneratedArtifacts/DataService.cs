//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LightSwitchApplication
{
    #region Data Services
    
    /// <summary>
    /// Provides members to query and update data in the ApplicationData datasource.
    /// </summary>
    public sealed partial class ApplicationDataService
        : global::LightSwitchApplication.ApplicationData
    {
        #region Constructors
    
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ApplicationDataService() : base()
        {
        }
    
        #endregion
    
        #region Private Properties
        
        /// <summary>
        /// Gets the Application object for this application.  The Application object provides access to active screens, methods to open screens and access to the current user.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.Application Application
        {
            get
            {
                return global::LightSwitchApplication.Application.Current;
            }
        }
        
        /// <summary>
        /// Gets the containing data workspace.  The data workspace provides access to all data sources in the application.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.LightSwitch.BuildTasks.CodeGen", "12.0.0.0")]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private global::LightSwitchApplication.DataWorkspace DataWorkspace
        {
            get
            {
                return (global::LightSwitchApplication.DataWorkspace)this.Details.DataWorkspace;
            }
        }
        
        #endregion
    
        #region Server Interceptions Points
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Inserting(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Inserted(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Updating(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Updated(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Deleting(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Deleted(global::LightSwitchApplication.Employee entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Validate(global::LightSwitchApplication.Employee entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Employees_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Employee, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_Inserting(global::LightSwitchApplication.FurtherAction entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_Inserted(global::LightSwitchApplication.FurtherAction entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_Updating(global::LightSwitchApplication.FurtherAction entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_Updated(global::LightSwitchApplication.FurtherAction entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_Deleting(global::LightSwitchApplication.FurtherAction entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_Deleted(global::LightSwitchApplication.FurtherAction entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_Validate(global::LightSwitchApplication.FurtherAction entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void FurtherActions_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.FurtherAction, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_Inserting(global::LightSwitchApplication.IssueComment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_Inserted(global::LightSwitchApplication.IssueComment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_Updating(global::LightSwitchApplication.IssueComment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_Updated(global::LightSwitchApplication.IssueComment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_Deleting(global::LightSwitchApplication.IssueComment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_Deleted(global::LightSwitchApplication.IssueComment entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_Validate(global::LightSwitchApplication.IssueComment entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueComments_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.IssueComment, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_Inserting(global::LightSwitchApplication.Issue entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_Inserted(global::LightSwitchApplication.Issue entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_Updating(global::LightSwitchApplication.Issue entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_Updated(global::LightSwitchApplication.Issue entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_Deleting(global::LightSwitchApplication.Issue entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_Deleted(global::LightSwitchApplication.Issue entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_Validate(global::LightSwitchApplication.Issue entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Issues_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Issue, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_CanInsert(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_CanUpdate(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_CanDelete(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_CanRead(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_Inserting(global::LightSwitchApplication.IssueType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_Inserted(global::LightSwitchApplication.IssueType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_Updating(global::LightSwitchApplication.IssueType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_Updated(global::LightSwitchApplication.IssueType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_Deleting(global::LightSwitchApplication.IssueType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_Deleted(global::LightSwitchApplication.IssueType entity);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_Validate(global::LightSwitchApplication.IssueType entity, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder results);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssueTypes_Filter(ref global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.IssueType, bool>> filter);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_Executed();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void SaveChanges_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MyFurtherActions_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyFurtherActions_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MyFurtherActions_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.FurtherAction> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyFurtherActions_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.FurtherAction> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyFurtherActions_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void InProgressIssues_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void InProgressIssues_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void InProgressIssues_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void InProgressIssues_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void InProgressIssues_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssuesDueToday_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void IssuesDueToday_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void IssuesDueToday_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void IssuesDueToday_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void IssuesDueToday_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MyIssues_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyIssues_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void MyIssues_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyIssues_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void MyIssues_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OverDueIssues_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void OverDueIssues_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void OverDueIssues_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void OverDueIssues_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void OverDueIssues_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UnassignedIssues_CanExecute(ref bool result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void UnassignedIssues_Executing();
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void UnassignedIssues_PreprocessQuery(ref global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void UnassignedIssues_Executed(global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue> result);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        partial void UnassignedIssues_ExecuteFailed(global::System.Exception exception);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executing(global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_Executed(global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor);
    
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        partial void Query_ExecuteFailed(global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor);
    
        #endregion
    
        #region Details Class
    
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        [global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1034:NestedTypesShouldNotBeVisible")]
        public static new class DetailsClass
        {
    
            static DetailsClass()
            {
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Employee>
                __EmployeesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Employee>(
                    "Employees",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Employees_Filter);
            private static bool __Employees_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Employees_CanInsert(ref result);
                return result;
            }
            private static bool __Employees_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Employees_CanUpdate(ref result);
                return result;
            }
            private static bool __Employees_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Employees_CanDelete(ref result);
                return result;
            }
            private static bool __Employees_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Employees_CanRead(ref result);
                return result;
            }
            private static void __Employees_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Inserting(e);
            }
            private static void __Employees_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Inserted(e);
            }
            private static void __Employees_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Updating(e);
            }
            private static void __Employees_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Updated(e);
            }
            private static void __Employees_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Deleting(e);
            }
            private static void __Employees_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e)
            {
                d.Employees_Deleted(e);
            }
            private static void __Employees_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Employee e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Employees_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Employee, bool>> __Employees_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Employee, bool>> filter = null;
                d.Employees_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.FurtherAction>
                __FurtherActionsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.FurtherAction>(
                    "FurtherActions",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__FurtherActions_Filter);
            private static bool __FurtherActions_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.FurtherActions_CanInsert(ref result);
                return result;
            }
            private static bool __FurtherActions_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.FurtherActions_CanUpdate(ref result);
                return result;
            }
            private static bool __FurtherActions_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.FurtherActions_CanDelete(ref result);
                return result;
            }
            private static bool __FurtherActions_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.FurtherActions_CanRead(ref result);
                return result;
            }
            private static void __FurtherActions_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.FurtherAction e)
            {
                d.FurtherActions_Inserting(e);
            }
            private static void __FurtherActions_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.FurtherAction e)
            {
                d.FurtherActions_Inserted(e);
            }
            private static void __FurtherActions_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.FurtherAction e)
            {
                d.FurtherActions_Updating(e);
            }
            private static void __FurtherActions_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.FurtherAction e)
            {
                d.FurtherActions_Updated(e);
            }
            private static void __FurtherActions_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.FurtherAction e)
            {
                d.FurtherActions_Deleting(e);
            }
            private static void __FurtherActions_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.FurtherAction e)
            {
                d.FurtherActions_Deleted(e);
            }
            private static void __FurtherActions_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.FurtherAction e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.FurtherActions_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.FurtherAction, bool>> __FurtherActions_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.FurtherAction, bool>> filter = null;
                d.FurtherActions_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.IssueComment>
                __IssueCommentsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.IssueComment>(
                    "IssueComments",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueComments_Filter);
            private static bool __IssueComments_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.IssueComments_CanInsert(ref result);
                return result;
            }
            private static bool __IssueComments_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.IssueComments_CanUpdate(ref result);
                return result;
            }
            private static bool __IssueComments_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.IssueComments_CanDelete(ref result);
                return result;
            }
            private static bool __IssueComments_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.IssueComments_CanRead(ref result);
                return result;
            }
            private static void __IssueComments_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueComment e)
            {
                d.IssueComments_Inserting(e);
            }
            private static void __IssueComments_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueComment e)
            {
                d.IssueComments_Inserted(e);
            }
            private static void __IssueComments_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueComment e)
            {
                d.IssueComments_Updating(e);
            }
            private static void __IssueComments_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueComment e)
            {
                d.IssueComments_Updated(e);
            }
            private static void __IssueComments_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueComment e)
            {
                d.IssueComments_Deleting(e);
            }
            private static void __IssueComments_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueComment e)
            {
                d.IssueComments_Deleted(e);
            }
            private static void __IssueComments_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueComment e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.IssueComments_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.IssueComment, bool>> __IssueComments_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.IssueComment, bool>> filter = null;
                d.IssueComments_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>
                __IssuesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>(
                    "Issues",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Issues_Filter);
            private static bool __Issues_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Issues_CanInsert(ref result);
                return result;
            }
            private static bool __Issues_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Issues_CanUpdate(ref result);
                return result;
            }
            private static bool __Issues_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Issues_CanDelete(ref result);
                return result;
            }
            private static bool __Issues_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.Issues_CanRead(ref result);
                return result;
            }
            private static void __Issues_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Issue e)
            {
                d.Issues_Inserting(e);
            }
            private static void __Issues_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Issue e)
            {
                d.Issues_Inserted(e);
            }
            private static void __Issues_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Issue e)
            {
                d.Issues_Updating(e);
            }
            private static void __Issues_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Issue e)
            {
                d.Issues_Updated(e);
            }
            private static void __Issues_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Issue e)
            {
                d.Issues_Deleting(e);
            }
            private static void __Issues_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Issue e)
            {
                d.Issues_Deleted(e);
            }
            private static void __Issues_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.Issue e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.Issues_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Issue, bool>> __Issues_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.Issue, bool>> filter = null;
                d.Issues_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.IssueType>
                __IssueTypesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.EntitySetEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.IssueType>(
                    "IssueTypes",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_CanInsert,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_CanUpdate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_CanDelete,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_CanRead,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_Inserting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_Inserted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_Updating,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_Updated,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_Deleting,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_Deleted,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_Validate,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssueTypes_Filter);
            private static bool __IssueTypes_CanInsert(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.IssueTypes_CanInsert(ref result);
                return result;
            }
            private static bool __IssueTypes_CanUpdate(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.IssueTypes_CanUpdate(ref result);
                return result;
            }
            private static bool __IssueTypes_CanDelete(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.IssueTypes_CanDelete(ref result);
                return result;
            }
            private static bool __IssueTypes_CanRead(global::LightSwitchApplication.ApplicationDataService d)
            {
                bool result = true;
                d.IssueTypes_CanRead(ref result);
                return result;
            }
            private static void __IssueTypes_Inserting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueType e)
            {
                d.IssueTypes_Inserting(e);
            }
            private static void __IssueTypes_Inserted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueType e)
            {
                d.IssueTypes_Inserted(e);
            }
            private static void __IssueTypes_Updating(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueType e)
            {
                d.IssueTypes_Updating(e);
            }
            private static void __IssueTypes_Updated(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueType e)
            {
                d.IssueTypes_Updated(e);
            }
            private static void __IssueTypes_Deleting(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueType e)
            {
                d.IssueTypes_Deleting(e);
            }
            private static void __IssueTypes_Deleted(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueType e)
            {
                d.IssueTypes_Deleted(e);
            }
            private static void __IssueTypes_Validate(global::LightSwitchApplication.ApplicationDataService d, global::LightSwitchApplication.IssueType e, global::Microsoft.LightSwitch.EntitySetValidationResultsBuilder r)
            {
                d.IssueTypes_Validate(e, r);
            }
            private static global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.IssueType, bool>> __IssueTypes_Filter(global::LightSwitchApplication.ApplicationDataService d)
            {
                global::System.Linq.Expressions.Expression<global::System.Func<global::LightSwitchApplication.IssueType, bool>> filter = null;
                d.IssueTypes_Filter(ref filter);
                return filter;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>
                __SaveChangesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.OperationEntry<global::LightSwitchApplication.ApplicationDataService>(
                    "SaveChanges",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__SaveChanges_Failed);
            private static bool __SaveChanges_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.SaveChanges_CanExecute(ref r);
                return r;
            }
            private static void __SaveChanges_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executing();
            }
            private static void __SaveChanges_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.SaveChanges_Executed();
            }
            private static void __SaveChanges_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.SaveChanges_ExecuteFailed(ex);
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.FurtherAction>
                __MyFurtherActionsEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.FurtherAction>(
                    "MyFurtherActions",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyFurtherActions_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyFurtherActions_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyFurtherActions_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyFurtherActions_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyFurtherActions_PreprocessQuery);
            private static bool __MyFurtherActions_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.MyFurtherActions_CanExecute(ref r);
                return r;
            }
            private static void __MyFurtherActions_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.MyFurtherActions_Executing();
            }
            private static void __MyFurtherActions_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.MyFurtherActions_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.FurtherAction>)args[0]);
            }
            private static void __MyFurtherActions_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.MyFurtherActions_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __MyFurtherActions_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.FurtherAction> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.FurtherAction>)args[0];
                d.MyFurtherActions_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>
                __InProgressIssuesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>(
                    "InProgressIssues",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__InProgressIssues_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__InProgressIssues_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__InProgressIssues_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__InProgressIssues_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__InProgressIssues_PreprocessQuery);
            private static bool __InProgressIssues_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.InProgressIssues_CanExecute(ref r);
                return r;
            }
            private static void __InProgressIssues_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.InProgressIssues_Executing();
            }
            private static void __InProgressIssues_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.InProgressIssues_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue>)args[0]);
            }
            private static void __InProgressIssues_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.InProgressIssues_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __InProgressIssues_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Issue>)args[0];
                d.InProgressIssues_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>
                __IssuesDueTodayEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>(
                    "IssuesDueToday",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssuesDueToday_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssuesDueToday_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssuesDueToday_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssuesDueToday_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__IssuesDueToday_PreprocessQuery);
            private static bool __IssuesDueToday_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.IssuesDueToday_CanExecute(ref r);
                return r;
            }
            private static void __IssuesDueToday_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.IssuesDueToday_Executing();
            }
            private static void __IssuesDueToday_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.IssuesDueToday_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue>)args[0]);
            }
            private static void __IssuesDueToday_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.IssuesDueToday_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __IssuesDueToday_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Issue>)args[0];
                d.IssuesDueToday_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>
                __MyIssuesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>(
                    "MyIssues",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyIssues_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyIssues_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyIssues_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyIssues_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__MyIssues_PreprocessQuery);
            private static bool __MyIssues_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.MyIssues_CanExecute(ref r);
                return r;
            }
            private static void __MyIssues_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.MyIssues_Executing();
            }
            private static void __MyIssues_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.MyIssues_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue>)args[0]);
            }
            private static void __MyIssues_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.MyIssues_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __MyIssues_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Issue>)args[0];
                d.MyIssues_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>
                __OverDueIssuesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>(
                    "OverDueIssues",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverDueIssues_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverDueIssues_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverDueIssues_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverDueIssues_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__OverDueIssues_PreprocessQuery);
            private static bool __OverDueIssues_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.OverDueIssues_CanExecute(ref r);
                return r;
            }
            private static void __OverDueIssues_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.OverDueIssues_Executing();
            }
            private static void __OverDueIssues_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.OverDueIssues_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue>)args[0]);
            }
            private static void __OverDueIssues_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.OverDueIssues_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __OverDueIssues_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Issue>)args[0];
                d.OverDueIssues_PreprocessQuery(ref query);
                return query;
            }
            
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>
                __UnassignedIssuesEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryOperationEntry<global::LightSwitchApplication.ApplicationDataService, global::LightSwitchApplication.Issue>(
                    "UnassignedIssues",
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__UnassignedIssues_CanExecute,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__UnassignedIssues_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__UnassignedIssues_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__UnassignedIssues_Failed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__UnassignedIssues_PreprocessQuery);
            private static bool __UnassignedIssues_CanExecute(global::LightSwitchApplication.ApplicationDataService d, bool r)
            {
                d.UnassignedIssues_CanExecute(ref r);
                return r;
            }
            private static void __UnassignedIssues_Executing(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.UnassignedIssues_Executing();
            }
            private static void __UnassignedIssues_Executed(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                d.UnassignedIssues_Executed((global::System.Collections.Generic.IEnumerable<global::LightSwitchApplication.Issue>)args[0]);
            }
            private static void __UnassignedIssues_Failed(global::LightSwitchApplication.ApplicationDataService d, object[] args, global::System.Exception ex)
            {
                d.UnassignedIssues_ExecuteFailed(ex);
            }
            private static global::System.Linq.IQueryable __UnassignedIssues_PreprocessQuery(global::LightSwitchApplication.ApplicationDataService d, object[] args)
            {
                global::System.Linq.IQueryable<global::LightSwitchApplication.Issue> query = (global::System.Linq.IQueryable<global::LightSwitchApplication.Issue>)args[0];
                d.UnassignedIssues_PreprocessQuery(ref query);
                return query;
            }
    
            [global::System.Diagnostics.DebuggerBrowsable(global::System.Diagnostics.DebuggerBrowsableState.Never)]
            private static readonly global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.ApplicationDataService>
                ___QueryEntry = new global::Microsoft.LightSwitch.Details.Framework.Server.QueryEntry<global::LightSwitchApplication.ApplicationDataService>(
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Executing,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Executed,
                    global::LightSwitchApplication.ApplicationDataService.DetailsClass.__Query_Failed);
            private static void __Query_Executing(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecutingDescriptor queryDescriptor)
            {
                d.Query_Executing(queryDescriptor);
            }
            private static void __Query_Executed(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecutedDescriptor queryDescriptor)
            {
                d.Query_Executed(queryDescriptor);
            }
            private static void __Query_Failed(global::LightSwitchApplication.ApplicationDataService d, global::Microsoft.LightSwitch.QueryExecuteFailedDescriptor queryDescriptor)
            {
                d.Query_ExecuteFailed(queryDescriptor);
            }
        }
    
        #endregion
    }
    
    #endregion
}
