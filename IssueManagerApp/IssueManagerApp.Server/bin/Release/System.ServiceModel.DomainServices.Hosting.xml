<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.ServiceModel.DomainServices.Hosting</name>
    </assembly>
    <members>
        <member name="T:System.ServiceModel.DomainServices.Hosting.MessageUtility">
            <summary>
            Utility class containing utility methods to read and/or modify messages.
            It is mainly used to insert(read) query options to(from) the URL or message body of the outgoing(incoming) messages.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.MessageUtility.GetServiceQuery(System.ServiceModel.Channels.Message@)">
            <summary>
            Extracts the service query and original message body from <paramref name="message"/> .
            May create a new message with the original body contents.
            </summary>
            <param name="message">The message to use for deserialization.</param>
            <returns>The extracted service query.</returns>
            <remarks>The message passed in will not be disposed. This message belongs to the
            caller.</remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.MessageUtility.ReadServiceQuery(System.Xml.XmlReader)">
            <summary>
            Reads the query options from the given reader and returns the resulting service query.
            It assumes that the reader is positioned on a stream containing the query options.
            </summary>
            <param name="reader">Reader to the stream containing the query options.</param>
            <returns>Extracted service query.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.IsTypeBinary(System.Type)">
            <summary>
            Returns whether the <paramref name="type"/> <c>is System.Data.Linq.Binary</c>.
            </summary>
            <remarks>
            We test Binary by Type Name so our client framework assembly can avoid taking an
            assembly reference to <c>System.Data.Linq</c>. If a type is determined to be
            binary, that type will be used to check reference equality for all subsequent
            invocations.
            </remarks>
            <param name="type">The type to check</param>
            <returns>Whether the <paramref name="type"/> is binary</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.GetByteArrayFromBinary(System.Object)">
            <summary>
            Returns the <paramref name="binary"/> converted to a <c>byte[]</c>.
            </summary>
            <param name="binary">The binary to convert</param>
            <returns>The byte[] form of the binary</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.GetBinaryFromByteArray(System.Byte[])">
            <summary>
            Returns the <paramref name="bytes"/> converted to a <c>System.Data.Linq.Binary</c>.
            </summary>
            <param name="bytes">The bytes to convert</param>
            <returns>The binary form of the bytes</returns>
        </member>
        <member name="F:System.ServiceModel.DomainServices.TypeUtility.systemAssemblyPublicKeyTokens">
            <summary>
            List of public key tokens used for System assemblies
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsNullableType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a <see cref="T:System.Nullable"/>
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the given type is a nullable type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.GetNonNullableType(System.Type)">
            <summary>
            If the given type is <see cref="T:System.Nullable"/>, returns the element type,
            otherwise simply returns the input type
            </summary>
            <param name="type">The type to test that may or may not be Nullable</param>
            <returns>Either the input type or, if it was Nullable, its element type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a primitive type or one
            of our standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, or one of our standard generic types whose generic
            argument is primitive or simple (e.g. Nullable, IEnumerable, IDictionary&lt;TKey,TValue&gt;).
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedListType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is <see cref="T:System.Collections.Generic.IEnumerable`1"/> or an <see cref="T:System.Collections.IList"/> type, 
            and is either an interface, an array, or has a default constructor.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSupportedCollectionType(System.Type)">
            <summary>
            Returns <c>true</c> if specified type is a supported collection Type. This method only checks the collection
            Type itself, not whether the element Type is supported.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a suppored collection Type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedDictionaryType(System.Type)">
            <summary>
            Returns <c>true</c> if <paramref name="type"/> implements <see cref="T:System.Collections.Generic.IDictionary`2"/> and
            its generic type arguments are acceptable predefined simple types.
            </summary>
            <param name="type">The type to test.</param>
            <returns><c>true</c> if the type is a <see cref="T:System.Collections.Generic.IDictionary`2"/> with supported generic type arguments.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedSimpleType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is either primitive or one of our
            standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, etc
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsComplexType(System.Type)">
            <summary>
            This method determines if the specified Type should be treated as a
            complex type by the framework.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a complex type, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsComplexTypeCollection(System.Type)">
            <summary>
            Determines whether the specified type is one of the supported collection types
            with a complex element type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a supported complex collection type, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSupportedComplexType(System.Type)">
            <summary>
            Determines whether the specified type is a complex type or a collection of
            complex types.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the specified type is a complex type or a collection of
            complex types, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.GetElementType(System.Type)">
            <summary>
            Returns the underlying element type starting from a given type.
            </summary>
            <remarks>
            Simple types simply return the input type.
            If the given type is an array, this method returns the array's
            element type.
            If the type is a generic type of <see cref="T:System.Collections.IEnumerable"/>, 
            or <see cref="T:System.Nullable"/>, this method returns the element
            type of the generic parameter
            </remarks>
            <param name="type"><see cref="T:System.Type"/> to examine.</param>
            <returns>The underlying element type starting from the given type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.DefinitionIsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.DefinitionIsAssignableFrom(System.Type,System.Type,System.Type@)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <param name="genericType">The generic base class or interface implemented by the derived
            type that can be made from the <paramref name="genericTypeDefinition"/>. This value is
            null when the method return false.
            </param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            Performs a check against an assembly to determine if it's a known
            System assembly.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.Reflection.AssemblyName)">
            <summary>
            Performs a check against an <see cref="T:System.Reflection.AssemblyName"/> to determine if it's a known
            System assembly.
            </summary>
            <param name="assemblyName">The assembly name to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.String)">
            <summary>
            Performs a check against an assembly's full name to determine if it's a known
            System assembly.
            </summary>
            <remarks>
            We can't use Assembly.GetName().GetPublicKeyToken() since that requires FileIOPermissions.
            </remarks>
            <param name="assemblyFullName">The <see cref="P:System.Reflection.AssemblyName.FullName"/> to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.ExceptionHandlingUtility.IsFatal(System.Exception)">
            <summary>
            Determines if an <see cref="T:System.Exception"/> is fatal and therefore should not be handled.
            </summary>
            <example>
            try
            {
                // Code that may throw
            }
            catch (Exception ex)
            {
                if (ex.IsFatal())
                {
                    throw;
                }
                
                // Handle exception
            }
            </example>
            <param name="exception">The exception to check</param>
            <returns><c>true</c> if the exception is fatal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.GetFactoryMethod(System.Reflection.ConstructorInfo,System.Type)">
            <summary>
            Gets a factory method for a late-bound type.
            </summary>
            <remarks>
            This method will return a delegate to a factory method that looks like this:
            <code>
            public object FactoryMethod([object[, object]*]) {
                return &lt;Constructor&gt;([object[, object]*]);
            }
            </code>
            </remarks>
            <param name="ctor">The constructor to invoke.</param>
            <param name="delegateType">The type of delegate to return.</param>
            <returns>A factory method delegate.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.GetDelegateForMethod(System.Reflection.MethodInfo)">
            <summary>
            Gets an early-bound delegate for an instance method.
            </summary>
            <remarks>
            This method will return a delegate to a proxy method that looks like this:
            <code>
            public object &lt;MethodName&gt;(DomainService target, object[] parameters) {
                return ((&lt;TargetType&gt;)target).&lt;MethodName&gt;();
                return ((&lt;TargetType&gt;)target).&lt;MethodName&gt;((&lt;ParameterType&gt;)parameters[0]);
            }
            </code>
            </remarks>
            <param name="method">The method that the delegate should invoke.</param>
            <returns>A delegate.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.EmitToObjectConversion(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits a conversion to type object for the value on the stack.
            </summary>
            <param name="generator">The code generator to use.</param>
            <param name="sourceType">The type of value on the stack.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.EmitFromObjectConversion(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits a conversion from type object for the value on the stack.
            </summary>
            <param name="generator">The code generator to use.</param>
            <param name="targetType">The type to which the value on the stack needs to be converted.</param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.MetaType">
            <summary>
            Class providing additional "meta" information for a Type.
            <remarks>
            Consider adding any commonly accessed or computed information about a Type
            to this class, to improve performance and code factoring.
            </remarks>
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.MetaType.GetMetaType(System.Type)">
            <summary>
            Returns the MetaType for the specified Type.
            <remarks>The MetaType should only be accessed AFTER all TypeDescriptors have
            been registered (i.e. after all DomainServiceDescriptions for services exposing
            the Type have been initialized).</remarks>
            </summary>
            <param name="type">The Type to provide the MetaType for.</param>
            <returns>The constructed MetaType.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.MetaType.CalculateAttributesRecursive(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            This recursive function visits every property in the type tree. For each property,
            we inspect the attributes and set meta attributes as needed.
            </summary>
            <param name="type">The root type to calculate attributes for.</param>
            <param name="visited">Visited set for recursion.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.Members">
            <summary>
            Gets the collection of members for this Type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.DataMembers">
            <summary>
            Gets the collection of data members for this Type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.Type">
            <summary>
            Gets the underlying CLR type for this MetaType
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.IncludedAssociations">
            <summary>
            Gets the collection of association members that have an IncludeAttribute applied
            to them.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.ProjectionMemberMap">
            <summary>
            Gets a map of all projection includes for each property.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.IsComplex">
            <summary>
            Gets a value indicating whether this is a ComplexType.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.RequiresValidation">
            <summary>
            Gets a value indicating whether the Type has any Type or member level
            validation attributes applied. The check is recursive through any complex
            type members.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.HasComposition">
            <summary>
            Gets a value indicating whether the Type has any members marked with
            CompositionAttribute.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.ValidationAttributes">
            <summary>
            Gets the Type level validation errors for the underlying Type.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.MetaMember">
            <summary>
            This class caches all the interesting attributes of an property.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaMember.IsCollection">
            <summary>
            Gets or sets a value indicating whether this member is a supported collection type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaMember.RequiresValidation">
            <summary>
            Returns <c>true</c> if the member has a property validator.
            </summary>
            <remarks>The return value does not take into account whether or not the member requires
            type validation.</remarks>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions">
            <summary>
            Extension methods for TypeDescriptors
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions.ExplicitAttributes(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Extension method to extract only the explicitly specified attributes from a <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <remarks>
            Normal TypeDescriptor semantics are to inherit the attributes of a property's type.  This method
            exists to suppress those inherited attributes.
            </remarks>
            <param name="propertyDescriptor">The property descriptor whose attributes are needed.</param>
            <returns>A new <see cref="T:System.ComponentModel.AttributeCollection"/> stripped of any attributes from the property's type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions.Attributes(System.Type)">
            <summary>
            Extension method to extract attributes from a type taking into account the inheritance type of attributes
            </summary>
            <remarks>
            Normal TypeDescriptor semantics are to inherit the attributes of a type's base type, regardless of their 
            inheritance type.
            </remarks>
            <param name="type">The type whose attributes are needed.</param>
            <returns>A new <see cref="T:System.ComponentModel.AttributeCollection"/> stripped of any incorrectly inherited attributes from the type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions.ContainsAttributeType``1(System.ComponentModel.AttributeCollection)">
            <summary>
            Checks to see if an attribute collection contains any attributes of the provided type.
            </summary>
            <typeparam name="TAttribute">The attribute type to check for</typeparam>
            <param name="attributes">The attribute collection to inspect</param>
            <returns><c>True</c> if an attribute of the provided type is contained in the attribute collection.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceFault">
            <summary>
            Message type used to communicate exception results between server and client.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceFault.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceFault.GetValidationErrors">
            <summary>
            Get the validation errors 
            </summary>
            <returns>
            Collection of validation errors as <see cref="T:System.Collections.IEnumerable"/>.
            </returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.DomainServiceFault.ErrorCode">
            <summary>
            Gets or sets the custom code for the error.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.DomainServiceFault.ErrorMessage">
            <summary>
            Gets or sets the message giving details on the error.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.DomainServiceFault.IsDomainException">
            <summary>
            Gets or sets a value indicating whether the error was a <see cref="T:System.ServiceModel.DomainServices.Server.DomainException"/>. 
            If the value is true, it indicates that the error should be reconstructed on the 
            client as the equivalent exception type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.DomainServiceFault.StackTrace">
            <summary>
            Gets or sets the stack trace for the error.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.DomainServiceFault.OperationErrors">
            <summary>
            Gets or sets the validation errors that occurred during this request.
            </summary>
            <remarks>This is only used when a request invokes a single method, such as an invoke operation.</remarks>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.QueryResult">
            <summary>
            Message type used to communicate query results between server and client.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryResult.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryResult.GetRootResults">
            <summary>
            Gets the root results.
            </summary>
            <returns>The root results.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryResult.GetIncludedResults">
            <summary>
            Gets the included results.
            </summary>
            <returns>The included results.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.QueryResult.TotalCount">
            <summary>
            Gets or sets the total number of rows for the original query without any paging applied to it.
            If the value is -1, the server did not support total-counts.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.QueryResult`1">
            <summary>
            Message type used to communicate query results between server and client.
            </summary>
            <typeparam name="T">The data type.</typeparam>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryResult`1.#ctor">
            <summary>
            Initializes a new instance of the QueryResult class
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryResult`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the QueryResult class with the specified
            collection of result items.
            </summary>
            <param name="results">The results</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryResult`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Initializes a new instance of the QueryResult class with the specified
            collection of result items and total count.
            </summary>
            <param name="results">The query results.</param>
            <param name="totalCount">The total number of rows based on the input query, but without 
            any paging applied to it.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryResult`1.GetRootResults">
            <summary>
            Gets the root results.
            </summary>
            <returns>The root results.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryResult`1.GetIncludedResults">
            <summary>
            Gets the included results.
            </summary>
            <returns>The included results.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.QueryResult`1.RootResults">
            <summary>
            Returns the top-level query results.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.QueryResult`1.IncludedResults">
            <summary>
            Returns the included query results.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.ServiceQuery">
            <summary>
            Represents an <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceQuery.QueryParts">
            <summary>
            Gets or sets a list of query parts.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceQuery.IncludeTotalCount">
            <summary>
            Gets or sets a value indicating whether the total entity count 
            property is required in the result.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart">
            <summary>
            Represents a single query operator to be applied to a query
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.#ctor(System.String,System.String)">
            <summary>
            Public constructor
            </summary>
            <param name="queryOperator">The query operator</param>
            <param name="expression">The query expression</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.ToString">
            <summary>
            Returns a string representation of this <see cref="T:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart"/>
            </summary>
            <returns>The string representation of this <see cref="T:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart"/></returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.QueryOperator">
            <summary>
            Gets or sets the query operator. Must be one of the supported operators : "where", "orderby", "skip", or "take".
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceQueryPart.Expression">
            <summary>
            Gets or sets the query expression.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.ExpressionParser.IsMemberAccessAllowed(System.Reflection.MethodBase,System.Linq.Expressions.Expression[])">
            <summary>
            Determines if the method is allowed to be executed based on an allow list.
            </summary>
            <param name="method">The method to check for access allowance.</param>
            <param name="args">The arguments passed to the method.</param>
            <returns><c>true</c> when the member access is allowed, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.ExpressionParser.ConvertEnumExpression(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)">
            <summary>
            We perform comparisons against enums using the underlying type
            because a more complete set of comparisons can be performed.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.IQueryOperationSettings">
            <summary>
            Encapsulates the settings the user specified for the query method.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.IQueryOperationSettings.HasSideEffects">
            <summary>
            Gets a value indicating whether the query method has side-effects.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior">
            <summary>
            A REST endpoint behavior which injects a message inspector that parses query headers.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.GetQueryStringConverter(System.ServiceModel.Description.OperationDescription)">
            <summary>
            Gets the query string converter.
            </summary>
            <param name="operationDescription">The service operation.</param>
            <returns>A <see cref="T:System.ServiceModel.Dispatcher.QueryStringConverter"/> instance.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.AddServerErrorHandlers(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)">
            <summary>
            Adds server-side error handlers.
            </summary>
            <param name="endpoint">The endpoint for which error handlers are added.</param>
            <param name="endpointDispatcher">The dispatcher to which error handlers are added.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.GetRequestDispatchFormatter(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Description.ServiceEndpoint)">
            <summary>
            Modifies the request dispatch formatter to read query paramters from the message body.
            </summary>
            <param name="operationDescription">The specified operation description.</param>
            <param name="endpoint">The specified endpoint.</param>
            <returns>The request dispatch formatter for the specified operation description and endpoint.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.GetServiceQuery(System.String,System.String)">
            <summary>
            This method returns a ServiceQuery for the specified URL and query string.
            <remarks>
            This method must ensure that the original ordering of the query parts is maintained
            in the results. We want to do this without doing any custom URL parsing. The approach
            taken is to use HttpUtility to parse the query string, and from those results we search
            in the full URL for the relative positioning of those elements.
            </remarks>
            </summary>
            <param name="queryString">The query string portion of the URL</param>
            <param name="fullRequestUrl">The full request URL</param>
            <returns>The corresponding ServiceQuery</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.WebHttpQueryDispatchMessageFormatter">
            <summary>
            A formatter for deserializing query requests which may have query parameters present in
            the To uri or message body.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceWebHttpBehavior.WebHttpQueryDispatchMessageFormatter.System#ServiceModel#Dispatcher#IDispatchMessageFormatter#DeserializeRequest(System.ServiceModel.Channels.Message,System.Object[])">
            <summary>
            Deserializes the message into requests parameters. Also parses query parameters
            from the request and stores the results in the original message.
            </summary>
            <param name="message">The incoming message to deserialize.</param>
            <param name="parameters">The parameters that are passed to the query operation.
            </param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.ClearOutputCachingPolicy">
            <summary>
            Clears the output cache policy.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.SetOutputCachingPolicy(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Sets the output cache policy for the specified domain operation entry.
            </summary>
            <param name="domainOperationEntry">The domain operation entry we need to define the cache policy for.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.GetCacheLocation(System.Web.UI.OutputCacheLocation)">
            <summary>
            Converts the specified <see cref="T:System.Web.UI.OutputCacheLocation"/> enum value to a <see cref="N:System.ServiceModel.DomainServices.Server"/> enum value.
            </summary>
            <param name="outputCacheLocation">The <see cref="T:System.Web.UI.OutputCacheLocation"/>.</param>
            <returns>The equivalent <see cref="T:System.ServiceModel.DomainServices.Server.OutputCacheLocation"/> value.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.GetCacheability(System.ServiceModel.DomainServices.Server.OutputCacheLocation)">
            <summary>
            Converts the specified <see cref="T:System.ServiceModel.DomainServices.Server.OutputCacheLocation"/> enum value to a <see cref="T:System.Web.HttpCacheability"/> enum value.
            </summary>
            <param name="outputCacheLocation">The <see cref="T:System.ServiceModel.DomainServices.Server.OutputCacheLocation"/>.</param>
            <returns>The equivalent <see cref="T:System.Web.HttpCacheability"/> value.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.GetOutputCacheInformation(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Gets cache information for the specified domain operation entry.
            </summary>
            <param name="method">The domain operation entry to get cache information for.</param>
            <returns>Cache information.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.SupportsCaching(System.Web.HttpContext,System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Determines whether caching is supported for the current request to the specified domain operation entry.
            </summary>
            <param name="context">The context for the request.</param>
            <param name="domainOperationEntry">The requested domain operation entry, if any.</param>
            <returns>True if caching is supported.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.QueryOperationBehavior`1.QueryOperationInvoker.SlidingExpirationValidator">
            <summary>
            Used to check whether a cache entry with sliding expiration has been expired.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor">
            <summary>
            Class used to process a changeset.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.Process(System.ServiceModel.DomainServices.Server.DomainService,System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Process the specified change set operations and return the results.
            </summary>
            <param name="domainService">The domain service that will process the changeset.</param>
            <param name="changeSetEntries">The change set entries to be processed.</param>
            <returns>Collection of results from the submit operation.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.GetSubmitResults(System.ServiceModel.DomainServices.Server.ChangeSet)">
            <summary>
            Examine the list of operations after the service has finished, and determine what needs to
            be sent back to the client.
            </summary>
            <param name="changeSet">The change set processed.</param>
            <returns>The results list.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.SetAssociationMember(System.Object,System.ComponentModel.PropertyDescriptor,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Adds the specified associated entities to the specified association member for the specified entity.
            </summary>
            <param name="entity">The entity</param>
            <param name="associationProperty">The association member (singleton or collection)</param>
            <param name="associatedEntities">Collection of associated entities</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.CreateChangeSet(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Create and initialize a ChangeSet from the specified entries.
            </summary>
            <param name="changeSetEntries">The changeset operations</param>
            <returns>The changeset.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ChangeSetProcessor.SetEntityAssociations(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Reestablish associations based on Id lists by adding the referenced entities
            to their association members
            </summary>
            <param name="changeSetEntries">The changeset operations</param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryEndpointFactory">
            <summary>
            Represents a REST w/ binary encoding endpoint factory for <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>s.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceEndpointFactory">
            <summary>
            Base class for <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> endpoint factories.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceEndpointFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServiceEndpointFactory"/> class.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceEndpointFactory.CreateEndpoints(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.ServiceModel.DomainServices.Hosting.DomainServiceHost)">
            <summary>
            Creates endpoints based on the specified description.
            </summary>
            <param name="description">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> to create the endpoints for.</param>
            <param name="serviceHost">The service host for which the endpoints will be created.</param>
            <returns>The endpoints that were created.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.DomainServiceEndpointFactory.Name">
            <summary>
            Gets or sets the name of the endpoint.
            </summary>
            <remarks>Default value is an empty string. This property doesn't accept <c>null</c> values.</remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.DomainServiceEndpointFactory.Parameters">
            <summary>
            Gets or sets a collection of key/value parameter pairs.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryEndpointFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryEndpointFactory"/> class.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryEndpointFactory.CreateEndpoints(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.ServiceModel.DomainServices.Hosting.DomainServiceHost)">
            <summary>
            Creates endpoints based on the specified description.
            </summary>
            <param name="description">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> to create the endpoints for.</param>
            <param name="serviceHost">The service host for which the endpoints will be created.</param>
            <returns>The endpoints that were created.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryEndpointFactory.CreateEndpointForAddress(System.ServiceModel.Description.ContractDescription,System.Uri)">
            <summary>
            Creates an endpoint based on the specified address.
            </summary>
            <param name="contract">The endpoint's contract.</param>
            <param name="address">The endpoint's base address.</param>
            <returns>An endpoint.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement">
            <summary>
            The binding element that specifies the .NET Binary Format for XML used to encode messages.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage">
            <summary>
            A buffered message created by a <see cref="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder"/>.
            </summary>
            <remarks>The Message.CreateMessage overloads do not provide a non-streamed message
            that is comparable to the messages produced by the WCF framework. This disparity
            leads to both functional and performance pitfalls. This class is an approximation
            of a buffered message used by WCF, specifically engineered for PoxBinary (i.e.
            MessageVersion.None only).</remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.#ctor(System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData)">
            <summary>
            Constructs a <see cref="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage"/>.
            </summary>
            <param name="data">The message data containing the message contents.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.OnBodyToString(System.Xml.XmlDictionaryWriter)">
            <summary>
            Converts the message body to a string.
            </summary>
            <param name="writer">The writer to which the message is written.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.OnClose">
            <summary>
            Disposes all message resources.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.OnCreateBufferedCopy(System.Int32)">
            <summary>
            Creates a buffer to store this message.
            </summary>
            <param name="maxBufferSize">The maximum size of the buffer to be created.</param>
            <returns>A buffer containing the message.</returns>
            <remarks>The <paramref name="maxBufferSize"/> is ignored. Since the message
            contents are shared, no additional buffers are created.</remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.OnGetReaderAtBodyContents">
            <summary>
            Returns an <see cref="T:System.Xml.XmlDictionaryReader"/> positioned at the message contents.
            </summary>
            <returns>An <see cref="T:System.Xml.XmlDictionaryReader"/>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.OnWriteBodyContents(System.Xml.XmlDictionaryWriter)">
            <summary>
            Writes the message body contents to the specified writer.
            </summary>
            <param name="writer">The <see cref="T:System.Xml.XmlDictionaryWriter"/> that is used to
            write the message body contents.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.Headers">
            <summary>
            The <see cref="T:System.ServiceModel.Channels.MessageHeaders"/> object that represents the headers of this message.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.IsFault">
            <summary>
            Returns <c>true</c> if this message contains a fault.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.Properties">
            <summary>
            The <see cref="T:System.ServiceModel.Channels.MessageProperties"/> instance that represents the properties of
            this message.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.Version">
            <summary>
            The version of this message.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.PoxBinaryBufferedMessageBuffer">
            <summary>
            Represents a buffer that stores the data required to create a
            <see cref="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage"/> or its contents for future consumption.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.PoxBinaryBufferedMessageBuffer.#ctor(System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData,System.ServiceModel.Channels.MessageHeaders,System.ServiceModel.Channels.MessageProperties)">
            <summary>
            Constructs a <see cref="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.PoxBinaryBufferedMessageBuffer"/>
            </summary>
            <param name="data">The message data.</param>
            <param name="headers">The message headers.</param>
            <param name="properties">The message properties.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.PoxBinaryBufferedMessageBuffer.Close">
            <summary>
            Closes the buffer.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.PoxBinaryBufferedMessageBuffer.CreateMessage">
            <summary>
            Returns an identical copy of the original message from which this buffer was
            created.
            </summary>
            <returns>A copy of the original message.</returns>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.PoxBinaryBufferedMessageBuffer.WriteMessage(System.IO.Stream)">
            <summary>
            Writes the entire contents of this buffer into the specified stream.
            </summary>
            <param name="stream">The stream that the buffer contents will be written to.</param>
            <exception cref="T:System.ArgumentNullException"/> 
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.PoxBinaryBufferedMessageBuffer.BufferSize">
            <summary>
            Gets the number of bytes consumed by this buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessage.PoxBinaryBufferedMessageBuffer.MessageContentType">
            <summary>
            Gets the type of content stored in this buffer.
            </summary>
            <exception cref="T:System.ObjectDisposedException"/>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData">
            <summary>
            The message data class that holds shared state between messages, buffers, and
            messages created from a buffer.
            </summary>
            <remarks>The desktop framework allows callers to keep track of reader lifetimes.
            With this ability, the state can be ref counted across all users, and the buffer
            can be returned to its manager when all users release their references.
            The Silverlight framework does not allow callers to keep track of reader lifetimes.
            Given this, the buffer is not returned to its manager, but is cleaned up by the GC.
            Note, without a custom message, we would use messages returned from
            Message.CreateMessage. These messages cannot reuse buffers.</remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData.#ctor(System.ArraySegment{System.Byte},System.ServiceModel.Channels.BufferManager,System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder)">
            <summary>
            Constructs a <see cref="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData"/>.
            </summary>
            <param name="buffer">The message contents.</param>
            <param name="bufferManager">The buffer manager from which
            <paramref name="buffer"/> came.</param>
            <param name="encoder">The encoder producing the message contents.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData.#ctor(System.ArraySegment{System.Byte},System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder)">
            <summary>
            Constructs a <see cref="T:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData"/>.
            </summary>
            <param name="buffer">The message contents.</param>
            <param name="encoder">The encoder producing the message contents.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData.Close">
            <summary>
            Releases a reference on the message data.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData.Open">
            <summary>
            Adds a reference on the message data.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData.TakeReader">
            <summary>
            Returns an <see cref="T:System.Xml.XmlDictionaryReader"/> containing the message contents.
            </summary>
            <returns>An <see cref="T:System.Xml.XmlDictionaryReader"/> containing the message
            contents.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData.OnReaderClose(System.Xml.XmlDictionaryReader)">
            <summary>
            The callback method that is called when a reader returned from this message
            data closes.
            </summary>
            <param name="reader">The closing reader.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData.Buffer">
            <summary>
            The message contents.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.PoxBinaryMessageEncodingBindingElement.PoxBinaryMessageEncoder.PoxBinaryBufferedMessageData.Encoder">
            <summary>
            The encoder producing the message contents.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServicesSection">
            <summary>
            Configures the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>s in this application.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServicesSection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServicesSection"/> class.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServicesSection.InitializeDefaultInternal">
            <summary>
            Allows internal code to initialize this object's defaults.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServicesSection.InitializeDefault">
            <summary>
            Used to initialize a default set of values for the <see cref="T:System.Configuration.ConfigurationElement"/> object.
            </summary>
            <remarks>
            Registers the default endpoints as well.
            </remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.DomainServicesSection.Endpoints">
            <summary>
            Gets the collection of endpoints that should be used by every <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> in this application.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.QueryProcessor">
            <summary>
            Class encapsulating query deserialization and operation execution, including
            result flattening and other processing. Basically this is the bridge between
            the service layer and the domain layer.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryProcessor.FlattenGraph``1(System.Collections.IEnumerable,System.Collections.Generic.List{``0},System.Collections.Generic.List{System.Object},System.Collections.Generic.HashSet{System.Object},System.ServiceModel.DomainServices.Server.DomainServiceDescription)">
            <summary>
            Traverse the result object graph, flattening into a single list. Note that this
            flattening must maintain relative ordering for the top level elements, since the client might 
            have passed an order expression.
            </summary>
            <typeparam name="TEntity">The root entity Type of the query.</typeparam>
            <param name="list">The list of entities to add to the results.</param>
            <param name="rootResults">The root entities. The value can be <value>null</value> if the list of root results is already known.</param>
            <param name="includedResults">The included entities.</param>
            <param name="visited">Map used for the lifetime of the flattening to ensure that each entity
            is added to the results only once.</param>
            <param name="domainServiceDescription">description for the DomainService.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryProcessor.RequiresFlattening(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.Type)">
            <summary>
            Determines whether a query result of the given type requires flattening.
            </summary>
            <remarks>
            This method exists to support a performance optimization to skip graph flattening
            of a query result when we discover the entity has no included associations.  It takes
            inheritance into account by checking for included associations on the given type as well
            as all types derived from it.
            
            This method evaluates only once per type and caches the result.
            </remarks>
            <param name="domainServiceDescription">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> to use to examine the entity hierarchy.</param>
            <param name="entityType">The entity type to analyze</param>
            <returns><c>true</c> if a query result of the given <paramref name="entityType"/> requires flattening.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.QueryProcessor.GetEntityDerivedTypes(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.Type)">
            <summary>
            Returns the collection of all entity types derived from <paramref name="entityType"/>
            </summary>
            <remarks>
            When entities are shared, because all DomainServices exposing entityType must expose the same least derived entity,
            and  DomainServiceDescription always caches all KnownTypes, the DomainServiceDescription.EntityTypes property
            exposes the same set of derived types regardless of which DomainServiceDescription we examine.
            </remarks>
            <param name="domainServiceDescription">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/>.</param>
            <param name="entityType">The entity type whose derived types are needed.</param>
            <returns>The collection of derived types.  It may be empty.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.GetClientType(System.Type)">
            <summary>
            Gets the type that should be used on the client for the specified type.
            </summary>
            <param name="t">The type to get the client type for.</param>
            <returns>The client type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.GetClientValue(System.Type,System.Object)">
            <summary>
            Gets a value that can be used by the client.
            </summary>
            <remarks>
            This method should be kept in sync with DataContractSurrogateGenerator.EmitToClientConversion.
            </remarks>
            <param name="targetType">The type used by the client.</param>
            <param name="value">The value on the server.</param>
            <returns>A value that can be used by the client.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.GetServerValue(System.Type,System.Object)">
            <summary>
            Gets a value that can be used by the server.
            </summary>
            <remarks>
            This method should be kept in sync with DataContractSurrogateGenerator.EmitToServerConversion.
            </remarks>
            <param name="targetType">The type used by the server.</param>
            <param name="value">The value from the client.</param>
            <returns>A value that can be used by the server.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.IsSerializableDataMember(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns true if the specified property is a data member that should be serialized
            </summary>
            <param name="propertyDescriptor">The property to inspect</param>
            <returns>true if the specified property is a data member that should be serialized</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceUtility.SetReaderQuotas(System.Xml.XmlDictionaryReaderQuotas)">
            <summary>
            Sets the default reader quotas.
            </summary>
            <param name="readerQuotas">The quotas object that needs to be updated.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceUtility.CreateFaultException(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Based on custom error settings, restrict the level of information
            returned in each error.
            </summary>
            <remarks>
            This method will also trace the exception if tracing is enabled.
            </remarks>
            <param name="validationErrors">The collection of errors to process.</param>
            <returns>An exception representing the validation errors.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceUtility.CreateFaultException(System.Exception)">
            <summary>
            Transforms the specified exception as appropriate into a fault message that can be sent
            back to the client.
            </summary>
            <remarks>
            This method will also trace the exception if tracing is enabled.
            </remarks>
            <param name="e">The exception that was caught.</param>
            <returns>The exception to return.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.ServiceUtility.FormatExceptionMessage(System.Exception)">
            <summary>
            For the specified exception, return the error message concatenating
            the message of any inner exception to one level deep.
            </summary>
            <param name="e">The exception</param>
            <returns>The formatted exception message.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceUtility.AuthenticationScheme">
            <summary>
            Gets the default authentication scheme supported by the server
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.ServiceUtility.CredentialType">
            <summary>
            Gets the default credential type supported by the server
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.ServiceUtility.WebServiceHostInspector">
            <summary>
            Uses the WCF <see cref="T:System.ServiceModel.Web.WebServiceHost"/> to get the default authentication scheme
            and credential type for services on the current server.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceHostFactory">
            <summary>
            Factory that provides instances of <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServiceHost"/> in managed 
            hosting environments where the host instance is created dynamically in response 
            to incoming messages.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceHostFactory.CreateServiceHost(System.Type,System.Uri[])">
            <summary>
            Creates a <see cref="T:System.ServiceModel.ServiceHost"/> for a specified type of service 
            with a specific base address.
            </summary>
            <param name="serviceType">Specifies the type of service to host.</param>
            <param name="baseAddresses">
            The <see cref="T:System.Array"/> of type <see cref="T:System.Uri"/> that contains the base 
            addresses for the service hosted.</param>
            <returns>
            A <see cref="T:System.ServiceModel.ServiceHost"/> for the type of service specified with 
            a specific base address.
            </returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceHost">
            <summary>
            Provides a host for domain services.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceHost.#ctor(System.Type,System.Uri[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServiceHost"/> class with
            the type of service and its base addresses specified.
            </summary>
            <param name="domainServiceType">The type of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> to host.</param>
            <param name="baseAddresses">
            An array of type <see cref="T:System.Uri"/> that contains the base addresses for 
            the hosted service.
            </param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceHost.GetService(System.Type)">
            <summary>
            Gets a service.
            </summary>
            <param name="serviceType">The type of service to get.</param>
            <returns>The service.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceHost.CreateDescription(System.Collections.Generic.IDictionary{System.String,System.ServiceModel.Description.ContractDescription}@)">
            <summary>
            Creates a description of the service hosted.
            </summary>
            <param name="implementedContracts">
            The <see cref="T:System.Collections.Generic.IDictionary`2"/> with key pairs of
            type (string, <see cref="T:System.ServiceModel.Description.ContractDescription"/>) that contains the 
            keyed-contracts of the hosted service that have been implemented.
            </param>
            <returns>A <see cref="T:System.ServiceModel.Description.ServiceDescription"/> of the hosted service.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceHost.ApplyConfiguration">
            <summary>
            Loads the service description information from the configuration file and 
            applies it to the runtime being constructed.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceHost.AddDefaultBehaviors">
            <summary>
            Adds the default service and contract behaviors for a domain service.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceHost.CreateEndpointFactoryInstance(System.Configuration.ProviderSettings)">
            <summary>
            Creates a <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServiceEndpointFactory"/> from a <see cref="T:System.Configuration.ProviderSettings"/> object.
            </summary>
            <param name="provider">The <see cref="T:System.Configuration.ProviderSettings"/> object.</param>
            <returns>A <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServiceEndpointFactory"/>.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.EnableClientAccessAttribute">
            <summary>
            Attribute used to mark a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> as 
            accessible to clients.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.EnableClientAccessAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Hosting.EnableClientAccessAttribute"/> class.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.EnableClientAccessAttribute.RequiresSecureEndpoint">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>
            may only be accessed using a secure endpoint.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainService_AssociationCollectionPropertyIsNull">
            <summary>
              Looks up a localized string similar to One or more associated objects were passed for collection property &apos;{1}&apos; on type &apos;{0}&apos;, but the target collection is null..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainService_InvalidCollectionMember">
            <summary>
              Looks up a localized string similar to Association collection member &apos;{0}&apos; does not implement IList and does not have an Add method..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainService_InvalidSqlDependencyFormat">
            <summary>
              Looks up a localized string similar to Incorrect SQL cache dependency syntax. The correct syntax is: &lt;databaseEntry&gt;:&lt;tableName&gt;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainService_ResourceNotFound">
            <summary>
              Looks up a localized string similar to The specified resource was not found.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainServiceHost_DuplicateContractName">
            <summary>
              Looks up a localized string similar to A contract with the name &apos;{0}&apos; already exists..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.DomainServiceVirtualPathProvider_DuplicateDomainServiceName">
            <summary>
              Looks up a localized string similar to DomainServices &apos;{0}&apos; and &apos;{1}&apos; have the same Type name and cannot be exposed from the same application..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.FaultException_InnerExceptionDetails">
            <summary>
              Looks up a localized string similar to {0} InnerException message: {1}.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.NoDefaultAuthScheme">
            <summary>
              Looks up a localized string similar to Unable to determine the authentication scheme to use with the default endpoint bindings..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.PoxBinaryMessageEncoder_InvalidContentType">
            <summary>
              Looks up a localized string similar to The PoxBinaryMessageEncoder only supports content type {0}..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.PoxBinaryMessageEncoder_InvalidMessageVersion">
            <summary>
              Looks up a localized string similar to The message has MessageVersion {0} but the encoder is configured for MessageVersion {1}..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.PoxBinaryMessageEncoder_MessageVersionNotSupported">
            <summary>
              Looks up a localized string similar to The PoxBinaryMessageEncoder only supports MessageVersion.None..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Hosting.Resource.Query_InvalidOperator">
            <summary>
              Looks up a localized string similar to Invalid query operator &apos;{0}&apos;..
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.DefaultQueryResolver">
            <summary>
            Default query resolver
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.QueryResolver">
            <summary>
            Defines a set of methods that can participate in query deserialization.
            </summary>
        </member>
        <member name="M:System.Linq.Dynamic.QueryResolver.ResolveMember(System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Called to attempt to resolve unresolved member references during query deserialization.
            </summary>
            <param name="type">The Type the member is expected on.</param>
            <param name="member">The member name.</param>
            <param name="instance">The instance to form the MemberExpression on.</param>
            <returns>A MemberExpression if the member can be resolved, null otherwise.</returns>
        </member>
        <member name="M:System.Linq.Dynamic.DefaultQueryResolver.ResolveMember(System.Type,System.String,System.Linq.Expressions.Expression)">
            <summary>
            Called to attempt to resolve unresolved member references during query deserialization.
            </summary>
            <param name="type">The Type the member is expected on.</param>
            <param name="member">The member name.</param>
            <param name="instance">The instance to form the MemberExpression on.</param>
            <returns>A MemberExpression if the member can be resolved, null otherwise.</returns>
        </member>
        <member name="T:System.Linq.Dynamic.QueryDeserializer">
            <summary>
            Used to deserialize a set of string based query operations into expressions and
            compose them over a specified query.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.QueryDeserializer.PostProcessor">
            <summary>
            Any expression tree transformations required after query parsing and composition
            are performed externally to the actual query parser.
            </summary>
        </member>
        <member name="T:System.Linq.Dynamic.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.AmbiguousConstructorInvocation">
            <summary>
              Looks up a localized string similar to Ambiguous invocation of &apos;{0}&apos; constructor.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.AmbiguousIndexerInvocation">
            <summary>
              Looks up a localized string similar to Ambiguous invocation of indexer in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.AmbiguousMethodInvocation">
            <summary>
              Looks up a localized string similar to Ambiguous invocation of method &apos;{0}&apos; in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.BothTypesConvertToOther">
            <summary>
              Looks up a localized string similar to Both of the types &apos;{0}&apos; and &apos;{1}&apos; convert to the other.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CannotConvertValue">
            <summary>
              Looks up a localized string similar to A value of type &apos;{0}&apos; cannot be converted to type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CannotIndexMultiDimArray">
            <summary>
              Looks up a localized string similar to Indexing of multi-dimensional arrays is not supported.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CloseBracketOrCommaExpected">
            <summary>
              Looks up a localized string similar to &apos;]&apos; or &apos;,&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CloseParenOrCommaExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; or &apos;,&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.CloseParenOrOperatorExpected">
            <summary>
              Looks up a localized string similar to &apos;)&apos; or operator expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ColonExpected">
            <summary>
              Looks up a localized string similar to &apos;:&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.DigitExpected">
            <summary>
              Looks up a localized string similar to Digit expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.DotOrOpenParenExpected">
            <summary>
              Looks up a localized string similar to &apos;.&apos; or &apos;(&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.DuplicateIdentifier">
            <summary>
              Looks up a localized string similar to The identifier &apos;{0}&apos; was defined more than once.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ExpressionExpected">
            <summary>
              Looks up a localized string similar to Expression expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ExpressionTypeMismatch">
            <summary>
              Looks up a localized string similar to Expression of type &apos;{0}&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.FirstExprMustBeBool">
            <summary>
              Looks up a localized string similar to The first expression must be of type &apos;Boolean&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.IdentifierExpected">
            <summary>
              Looks up a localized string similar to Identifier expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.IifRequiresThreeArgs">
            <summary>
              Looks up a localized string similar to The &apos;iif&apos; function requires three arguments.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.IncompatibleOperand">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.IncompatibleOperands">
            <summary>
              Looks up a localized string similar to Operator &apos;{0}&apos; incompatible with operand types &apos;{1}&apos; and &apos;{2}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidCharacter">
            <summary>
              Looks up a localized string similar to Syntax error &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidCharacterLiteral">
            <summary>
              Looks up a localized string similar to Character literal must contain exactly one character.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidIndex">
            <summary>
              Looks up a localized string similar to Array index must be an integer expression.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidIntegerLiteral">
            <summary>
              Looks up a localized string similar to Invalid integer literal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.InvalidRealLiteral">
            <summary>
              Looks up a localized string similar to Invalid real literal &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.MethodIsVoid">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; in type &apos;{1}&apos; does not return a value.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.MethodsAreInaccessible">
            <summary>
              Looks up a localized string similar to Methods on type &apos;{0}&apos; are not accessible.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NeitherTypeConvertsToOther">
            <summary>
              Looks up a localized string similar to Neither type &apos;{0}&apos; or &apos;{1}&apos; converts to the other.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoApplicableAggregate">
            <summary>
              Looks up a localized string similar to No applicable aggregate method &apos;{0}&apos; exists.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoApplicableIndexer">
            <summary>
              Looks up a localized string similar to No applicable indexer exists in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoApplicableMethod">
            <summary>
              Looks up a localized string similar to No applicable method &apos;{0}&apos; exists in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoItInScope">
            <summary>
              Looks up a localized string similar to No &apos;it&apos; is in scope.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.NoMatchingConstructor">
            <summary>
              Looks up a localized string similar to No matching constructor in type &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.OpenParenExpected">
            <summary>
              Looks up a localized string similar to &apos;(&apos; expected.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.ParseExceptionFormat">
            <summary>
              Looks up a localized string similar to {0} (at index {1}).
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.SyntaxError">
            <summary>
              Looks up a localized string similar to Syntax error.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.TypeHasNoNullableForm">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; has no nullable form.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.UnknownIdentifier">
            <summary>
              Looks up a localized string similar to Unknown identifier &apos;{0}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.UnknownPropertyOrField">
            <summary>
              Looks up a localized string similar to No property or field &apos;{0}&apos; exists in type &apos;{1}&apos;.
            </summary>
        </member>
        <member name="P:System.Linq.Dynamic.Resource.UnterminatedStringLiteral">
            <summary>
              Looks up a localized string similar to Unterminated string literal.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DataContractSurrogateGenerator">
            <summary>
            Takes care of generating CLR types based on the virtual shape of an exposed type. E.g. we may be dealing with 
            projection properties that don't physically exist on the CLR type. Because WCF doesn't know about TypeDescriptor, 
            it won't see these virtual properties. This is why we generate CLR types that contain first-class properties.
            At serialization/deserialization time, the surrogate type will delegate to both the physical and virtual 
            properties on the real exposed object.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DataContractSurrogateGenerator.GetSurrogateType(System.Collections.Generic.HashSet{System.Type},System.Type)">
            <summary>
            Emits a surrogate type for the specified type.
            </summary>
            <param name="knownExposedTypes">The known set of exposed types.</param>
            <param name="type">The original type.</param>
            <returns>The surrogate type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Hosting.DomainServiceSerializationSurrogate.#ctor(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.Collections.Generic.Dictionary{System.Type,System.Tuple{System.Type,System.Func{System.Object,System.Object}}},System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Default constructor.
            </summary>
            <param name="description">A description of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> this type creates surrogates for.</param>
            <param name="exposedTypeToSurrogateMap">
            The map of known exposed types to surrogate types. This object is passed in externally for efficiency reasons. Its 
            contents won't change; the set is owned by this type.
            </param>
            <param name="surrogateTypes">
            The set of known surrogate types. This object is passed in externally for efficiency reasons. Its contents 
            won't change; the set is owned by this type.
            </param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceHttpModule">
            <summary>
            Represents a module which takes care of registering the <see cref="T:System.ServiceModel.DomainServices.Hosting.DomainServiceVirtualPathProvider"/>.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceVirtualPathProvider">
            <summary>
            Takes care of generating a service file when a physical one doesn't exist.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Hosting.DomainServiceVirtualPathProvider.DomainServiceCacheDependency">
            <summary>
            This is a no-op cache dependency.
            </summary>
        </member>
    </members>
</doc>
