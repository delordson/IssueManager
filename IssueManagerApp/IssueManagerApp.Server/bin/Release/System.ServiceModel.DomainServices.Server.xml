<?xml version="1.0"?>
<doc>
    <assembly>
        <name>System.ServiceModel.DomainServices.Server</name>
    </assembly>
    <members>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.IsTypeBinary(System.Type)">
            <summary>
            Returns whether the <paramref name="type"/> <c>is System.Data.Linq.Binary</c>.
            </summary>
            <remarks>
            We test Binary by Type Name so our client framework assembly can avoid taking an
            assembly reference to <c>System.Data.Linq</c>. If a type is determined to be
            binary, that type will be used to check reference equality for all subsequent
            invocations.
            </remarks>
            <param name="type">The type to check</param>
            <returns>Whether the <paramref name="type"/> is binary</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.GetByteArrayFromBinary(System.Object)">
            <summary>
            Returns the <paramref name="binary"/> converted to a <c>byte[]</c>.
            </summary>
            <param name="binary">The binary to convert</param>
            <returns>The byte[] form of the binary</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.BinaryTypeUtility.GetBinaryFromByteArray(System.Byte[])">
            <summary>
            Returns the <paramref name="bytes"/> converted to a <c>System.Data.Linq.Binary</c>.
            </summary>
            <param name="bytes">The bytes to convert</param>
            <returns>The binary form of the bytes</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainException">
            <summary>
            This exception indicates that an unrecoverable error has occurred 
            during the execution of a domain operation.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainException.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainException.#ctor(System.String)">
            <summary>
            Constructor that accepts a localized exception message.
            </summary>
            <param name="message">The localized exception message.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor that accepts a localized exception message and a custom error code.
            </summary>
            <param name="message">The localized exception message.</param>
            <param name="errorCode">The custom error code for the exception.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor that accepts a localized exception message and an inner exception.
            </summary>
            <param name="message">The localized exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainException.#ctor(System.String,System.Int32,System.Exception)">
            <summary>
            Constructor that accepts a localized exception message and an inner exception
            </summary>
            <param name="message">The localized exception message</param>
            <param name="errorCode">The custom error code for the exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor that takes serialization info
            </summary>
            <param name="info">The serialization info</param>
            <param name="context">The streaming context used for serialization</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainException.ErrorCode">
            <summary>
            Gets or sets the custom error code for this exception. Can be any user
            defined value.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.DomainIdentifierAttribute">
            <summary>
            A tagging attribute used to categorize a Type as being of a particular domain.
            </summary>
            <remarks>This attribute will move through the metadata pipeline, so the corresponding
            generated types will also have this attribute. This attribute also allows for specification 
            of a <see cref="P:System.ServiceModel.DomainServices.DomainIdentifierAttribute.CodeProcessor"/> which will be used during generation of client types.
            </remarks>
            <seealso cref="P:System.ServiceModel.DomainServices.DomainIdentifierAttribute.CodeProcessor"/>
        </member>
        <member name="M:System.ServiceModel.DomainServices.DomainIdentifierAttribute.#ctor(System.String)">
            <summary>
            Constructor that accepts the domain identifier name.
            </summary>
            <param name="name">Name of the domain identifier. This string has no framework-level semantics.  It is entirely
            up to the application developer to decide what constitutes uniqueness or whether it is case-sensitive.
            It cannot be null or empty.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.DomainIdentifierAttribute.Name">
            <summary>
            Gets the name of the domain identifier.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown from the getter if <see cref="P:System.ServiceModel.DomainServices.DomainIdentifierAttribute.Name"/>
            is null or empty.</exception>
        </member>
        <member name="P:System.ServiceModel.DomainServices.DomainIdentifierAttribute.IsApplicationService">
            <summary>
            Gets or sets a value that indicates whether the attributed type represents an application service.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.DomainIdentifierAttribute.CodeProcessor">
            <summary>
            Gets or sets the <see cref="P:System.ServiceModel.DomainServices.DomainIdentifierAttribute.CodeProcessor"/> type
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.DomainIdentifierAttribute.TypeId">
            <summary>
            Gets a unique identifier for this DomainIdentifierAttribute.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.ExternalReferenceAttribute">
            <summary>
            Attribute used to indicate that an association references entities belonging to an external
            DomainContext.
            </summary>
            <remarks>
            When applied to an entity association member, this attribute indicates that the framework should not
            create a corresponding EntitySet in the generated client-side code.  Consumers of the
            client-side property will need to add a DomainContext reference to the appropriate DomainContext
            containing the external entity type.
            </remarks>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute">
            <summary>
            When applied to a member, this attribute indicates that the original value of
            the member should be sent back to the server when the object is updated. When applied
            to a class, the attribute gets applied to each member of that class. If this attribute is not 
            present, the value of this member will be null in the original object sent back to the server.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.TypeUtility.systemAssemblyPublicKeyTokens">
            <summary>
            List of public key tokens used for System assemblies
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsNullableType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a <see cref="T:System.Nullable"/>
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the given type is a nullable type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.GetNonNullableType(System.Type)">
            <summary>
            If the given type is <see cref="T:System.Nullable"/>, returns the element type,
            otherwise simply returns the input type
            </summary>
            <param name="type">The type to test that may or may not be Nullable</param>
            <returns>Either the input type or, if it was Nullable, its element type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is a primitive type or one
            of our standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, or one of our standard generic types whose generic
            argument is primitive or simple (e.g. Nullable, IEnumerable, IDictionary&lt;TKey,TValue&gt;).
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedListType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is <see cref="T:System.Collections.Generic.IEnumerable`1"/> or an <see cref="T:System.Collections.IList"/> type, 
            and is either an interface, an array, or has a default constructor.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSupportedCollectionType(System.Type)">
            <summary>
            Returns <c>true</c> if specified type is a supported collection Type. This method only checks the collection
            Type itself, not whether the element Type is supported.
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a suppored collection Type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedDictionaryType(System.Type)">
            <summary>
            Returns <c>true</c> if <paramref name="type"/> implements <see cref="T:System.Collections.Generic.IDictionary`2"/> and
            its generic type arguments are acceptable predefined simple types.
            </summary>
            <param name="type">The type to test.</param>
            <returns><c>true</c> if the type is a <see cref="T:System.Collections.Generic.IDictionary`2"/> with supported generic type arguments.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsPredefinedSimpleType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type is either primitive or one of our
            standard acceptable simple types, such as <see cref="T:System.String"/>,
            <see cref="T:System.Guid"/>, etc
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or standard acceptable types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsComplexType(System.Type)">
            <summary>
            This method determines if the specified Type should be treated as a
            complex type by the framework.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a complex type, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsComplexTypeCollection(System.Type)">
            <summary>
            Determines whether the specified type is one of the supported collection types
            with a complex element type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a supported complex collection type, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSupportedComplexType(System.Type)">
            <summary>
            Determines whether the specified type is a complex type or a collection of
            complex types.
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the specified type is a complex type or a collection of
            complex types, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.GetElementType(System.Type)">
            <summary>
            Returns the underlying element type starting from a given type.
            </summary>
            <remarks>
            Simple types simply return the input type.
            If the given type is an array, this method returns the array's
            element type.
            If the type is a generic type of <see cref="T:System.Collections.IEnumerable"/>, 
            or <see cref="T:System.Nullable"/>, this method returns the element
            type of the generic parameter
            </remarks>
            <param name="type"><see cref="T:System.Type"/> to examine.</param>
            <returns>The underlying element type starting from the given type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.DefinitionIsAssignableFrom(System.Type,System.Type)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.DefinitionIsAssignableFrom(System.Type,System.Type,System.Type@)">
            <summary>
            Determines whether the generic type definition is assignable from the derived type.
            </summary>
            <remarks>
            This behaves just like <see cref="M:System.Type.IsAssignableFrom(System.Type)"/> except that it determines
            whether any generic type that can be made from the <paramref name="genericTypeDefinition"/>
            is assignable from <paramref name="derivedType"/>.
            </remarks>
            <param name="genericTypeDefinition">The generic type definition</param>
            <param name="derivedType">The type to determine assignability from</param>
            <param name="genericType">The generic base class or interface implemented by the derived
            type that can be made from the <paramref name="genericTypeDefinition"/>. This value is
            null when the method return false.
            </param>
            <returns>Whether the type definition is assignable from the derived type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.Reflection.Assembly)">
            <summary>
            Performs a check against an assembly to determine if it's a known
            System assembly.
            </summary>
            <param name="assembly">The assembly to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.Reflection.AssemblyName)">
            <summary>
            Performs a check against an <see cref="T:System.Reflection.AssemblyName"/> to determine if it's a known
            System assembly.
            </summary>
            <param name="assemblyName">The assembly name to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.TypeUtility.IsSystemAssembly(System.String)">
            <summary>
            Performs a check against an assembly's full name to determine if it's a known
            System assembly.
            </summary>
            <remarks>
            We can't use Assembly.GetName().GetPublicKeyToken() since that requires FileIOPermissions.
            </remarks>
            <param name="assemblyFullName">The <see cref="P:System.Reflection.AssemblyName.FullName"/> to check.</param>
            <returns><c>true</c> if the assembly is known to be a system assembly, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationUtilities.CreateValidationContext(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Creates a new <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext"/> for the current object instance.
            </summary>
            <param name="instance">The object instance being validated.</param>
            <param name="parentContext">Optional context to inherit from.  May be null.</param>
            <returns>A new validation context.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationUtilities.GetMethod(System.Object,System.String,System.Object[])">
            <summary>
            Internal helper method for getting a method from an object instance that matches
            the specified parameters.
            </summary>
            <param name="instance">Object instance on which the method will be called</param>
            <param name="methodName">The name of the method to be called</param>
            <param name="parameters">The parameter values to be passed to the method</param>
            <returns>A <see cref="T:System.Reflection.MethodInfo"/> from an object instance that matches
            the specified parameters.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationUtilities.IsBindable(System.Reflection.MethodInfo,System.Object[])">
            <summary>
            Checks whether the specified set of parameters can be passed to the specified method.
            </summary>
            <param name="method">The method to validate the set of parameters against.</param>
            <param name="parameters">The set of parameters to check.</param>
            <returns><c>true</c> if the set of parameters can be passed to the specified method.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationUtilities.ApplyMemberPath(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult},System.String)">
            <summary>
            Appends the specified memberPath to all member names in the validation results.
            </summary>
            <param name="validationResults">The validation results</param>
            <param name="memberPath">The member path to append</param>
            <returns>The updated validation results</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationUtilities.ApplyMemberPath(System.ComponentModel.DataAnnotations.ValidationResult,System.String)">
            <summary>
            Appends the specified memberPath to all member names in the validation result.
            </summary>
            <param name="validationResult">The validation result</param>
            <param name="memberPath">The member path to append</param>
            <returns>The updated validation result</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationUtilities.TryValidateObject(System.Object,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Validate the specified object an any complex members or collections recursively.
            </summary>
            <param name="instance">The instance to validate.</param>
            <param name="validationContext">The validation context</param>
            <param name="validationResults">The validation results</param>
            <returns>True if the object is valid, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationUtilities.ValidateObjectRecursive(System.Object,System.String,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            This method recursively validates an object, first validating all properties, then
            validating the type. This method implements the classic Try pattern. However it serves
            as code sharing for the validation pattern where an exception is thrown on first error.
            </summary>
            <param name="instance">The object to validate.</param>
            <param name="memberPath">The dotted path of the member.</param>
            <param name="validationContext">The validation context.</param>
            <param name="validationResults">The collection in which the validation results will be
            stored. The collection can be <c>null</c>.</param>
            <returns><c>True</c> if the object was successfully validated with no errors.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="validationResults"/> is
            <c>null</c> and the object has a validation error.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationUtilities.ValidateComplexCollection(System.Collections.IEnumerable,System.String,System.ComponentModel.DataAnnotations.ValidationContext,System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            This method deeply validates all objects in a collection. This method implements the
            classic Try pattern. However it serves as code sharing for the validation pattern where
            an exception is thrown on first error.
            </summary>
            <param name="elements">The enumerable containing the objects to validate.</param>
            <param name="memberPath">The dotted path of the member.</param>
            <param name="validationContext">The validation context.</param>
            <param name="validationResults">The collection in which the validation results will be
            stored. The collection can be <c>null</c>.</param>
            <returns><c>True</c> if the object was successfully validated with no errors.</returns>
            <exception cref="T:System.ComponentModel.DataAnnotations.ValidationException">When <paramref name="validationResults"/> is
            <c>null</c> and the object has a validation error.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationUtilities.NormalizeMemberPath(System.String,System.Type)">
            <summary>
            Adds the collection token '()' to the <paramref name="memberPath"/> if the
            <paramref name="memberType"/> is an IEnumerable.
            </summary>
            <param name="memberPath">The path of the member.</param>
            <param name="memberType">The type of the member.</param>
            <returns>The correct member representation.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.ExceptionHandlingUtility.IsFatal(System.Exception)">
            <summary>
            Determines if an <see cref="T:System.Exception"/> is fatal and therefore should not be handled.
            </summary>
            <example>
            try
            {
                // Code that may throw
            }
            catch (Exception ex)
            {
                if (ex.IsFatal())
                {
                    throw;
                }
                
                // Handle exception
            }
            </example>
            <param name="exception">The exception to check</param>
            <returns><c>true</c> if the exception is fatal, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ValidationResultInfo">
            <summary>
            The data contract of an error that has occurred 
            during the execution of an operation on the server.
            This is sent back along with the domain operation 
            result(s) to the client.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationResultInfo.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationResultInfo.#ctor(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor accepting an optional localized error message and and collection 
            of the names of the members the error originated from.
            </summary>
            <param name="message">The localized message</param>
            <param name="sourceMemberNames">A collection of the names of the members the error originated from.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationResultInfo.#ctor(System.String,System.Int32,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Constructor accepting an optional localized error message, error code, stack trace,
            and collection of the names of the members the error originated from.
            </summary>
            <param name="message">The localized error message</param>
            <param name="errorCode">The custom error code</param>
            <param name="stackTrace">The error stack trace</param>
            <param name="sourceMemberNames">A collection of the names of the members the error originated from.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationResultInfo.GetHashCode">
            <summary>
            Returns the hash code for this object.
            </summary>
            <returns>The hash code for this object.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ValidationResultInfo.System#IEquatable{System#ServiceModel#DomainServices#Server#ValidationResultInfo}#Equals(System.ServiceModel.DomainServices.Server.ValidationResultInfo)">
            <summary>
            Test the current instance against the specified instance for equality
            </summary>
            <param name="other">The ValidationResultInfo to compare to</param>
            <returns>True if the instances are equal, false otherwise</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ValidationResultInfo.Message">
            <summary>
            Gets or sets the error message
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ValidationResultInfo.ErrorCode">
            <summary>
            Gets or sets custom error code
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ValidationResultInfo.StackTrace">
            <summary>
            Gets or sets the stack trace of the error
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ValidationResultInfo.SourceMemberNames">
            <summary>
            Gets or sets the names of the members the error originated from.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.GetClientType(System.Type)">
            <summary>
            Gets the type that should be used on the client for the specified type.
            </summary>
            <param name="t">The type to get the client type for.</param>
            <returns>The client type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.GetClientValue(System.Type,System.Object)">
            <summary>
            Gets a value that can be used by the client.
            </summary>
            <remarks>
            This method should be kept in sync with DataContractSurrogateGenerator.EmitToClientConversion.
            </remarks>
            <param name="targetType">The type used by the client.</param>
            <param name="value">The value on the server.</param>
            <returns>A value that can be used by the client.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.GetServerValue(System.Type,System.Object)">
            <summary>
            Gets a value that can be used by the server.
            </summary>
            <remarks>
            This method should be kept in sync with DataContractSurrogateGenerator.EmitToServerConversion.
            </remarks>
            <param name="targetType">The type used by the server.</param>
            <param name="value">The value from the client.</param>
            <returns>A value that can be used by the server.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.SerializationUtility.IsSerializableDataMember(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Returns true if the specified property is a data member that should be serialized
            </summary>
            <param name="propertyDescriptor">The property to inspect</param>
            <returns>true if the specified property is a data member that should be serialized</returns>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.AuthorizationContext">
            <summary>
            Describes the context in which an authorization is being performed.
            </summary>
            <remarks>
            This class contains information describing the instance and the operation
            being authorized.  It implements <see cref="T:System.IDisposable"/> and must be
            properly disposed after use.
            <para>
            It supports <see cref="T:System.IServiceProvider"/> so that custom validation
            code can acquire additional services to help it perform its validation.
            </para>
            <para>
            An <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationContext.Items"/> property bag is available for additional contextual
            information about the authorization.  Values stored in <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationContext.Items"/>
            will be available to authorization methods that use this <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/>
            </para>
            <para>
            This class also provides an <see cref="T:System.ComponentModel.Design.IServiceContainer"/> implementation to allow
            developers to add services to the context at runtime.   This container is available
            via <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationContext.GetService(System.Type)"/> specifying <c>typeof(IServiceContainer)</c> or via
            the <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationContext.ServiceContainer"/> property.
            </para>
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationContext.#ctor(System.IServiceProvider)">
            <summary>
            Initalizes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> class that can be used as a template.
            </summary>
            <remarks>
            This form of the contructor creates only a template <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/>
            which cannot be used directly in authorization requests.
            <para>
            A template <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> is one which has been configured with
            a set of services and <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationContext.Items"/> the developer wants to use for authorization
            requests.  It cannot be used directly during authorization, but an alternate form of the 
            constructor allows other <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> instances to clone that
            template's state.
            </para>
            <para>
            The <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.AuthorizationContext"/> 
            property allows such a template to be set into the
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> for all authorization requests.
            </para>
            </remarks>
            <param name="serviceProvider">Optional parent <see cref="T:System.IServiceProvider"/> to which calls to
            <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationContext.GetService(System.Type)"/> can be delegated.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationContext.#ctor(System.Object,System.String,System.String,System.IServiceProvider,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Initalizes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> class that can be used for authorization.
            </summary>
            <param name="instance">Optional object instance.</param>
            <param name="operation">Name of the operation requiring authorization, such as "GetEmployees".</param>
            <param name="operationType">Kind of the operation requiring authorization, such as "Query".</param>
            <param name="serviceProvider">Optional <see cref="T:System.IServiceProvider"/> to use when <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationContext.GetService(System.Type)"/> is called.
            </param>
            <param name="items">Optional set of key/value pairs to make available to consumers via <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationContext.Items"/>.
            If null, an empty dictionary will be created.  If not null, the set of key/value pairs will be copied into a
            new dictionary, preventing consumers from modifying the original dictionary.
            </param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="operation"/> or <paramref name="operationType"/> is <c>null</c> or empty.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationContext.#ctor(System.Object,System.String,System.String,System.ComponentModel.DataAnnotations.AuthorizationContext)">
            <summary>
            Initalizes a new instance of the <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> class from a template that can be used for authorization.
            </summary>
            <remarks>
            The specified <paramref name="authorizationContext"/> will be used as the new instance's
            <see cref="T:System.IServiceProvider"/>, and a snapshot of its <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationContext.Items"/> will be captured.
            </remarks>
            <param name="instance">Optional object instance.</param>
            <param name="operation">Name of the operation requiring authorization, such as "GetEmployees".</param>
            <param name="operationType">Kind of the operation requiring authorization, such as "Query".</param>
            <param name="authorizationContext">An existing <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> to use as a template.</param>
            <exception cref="T:System.ArgumentNullException">When <paramref name="operation"/> or <paramref name="operationType"/> is <c>null</c> or empty
            or <paramref name="authorizationContext"/> is <c>null</c>.</exception>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationContext.EnsureNotTemplate">
            <summary>
            Helper method that throws <see cref="T:System.InvalidOperationException"/> if the current
            instance is only a template.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationContext.Setup(System.Object,System.String,System.String,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            Helper method to initialize some ctor parameters
            </summary>
            <param name="instance">Optional instance.</param>
            <param name="operation">Required operation name.</param>
            <param name="operationType">Required operation type.</param>
            <param name="items">Optional name/value pairs.</param>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationContext.Dispose">
            <summary>
            Dispose this <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/>.
            </summary>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationContext.GetService(System.Type)">
            <summary> 
            Returns a service of the specified <paramref name="serviceType"/>.
            </summary>
            <remarks>
            See <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            </remarks>
            <param name="serviceType">The type of the service needed.</param>
            <returns>An instance of that service or null if it is not available.</returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AuthorizationContext.ServiceContainer">
            <summary>
            Gets a <see cref="T:System.ComponentModel.Design.IServiceContainer"/> that can be used for adding,
            removing, and getting services used for authorization.  <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationContext.GetService(System.Type)"/>
            will query into this container as well as the <see cref="T:System.IServiceProvider"/>
            specified in the constructor.
            </summary>
            <value>
            This container will be created only on demand and is effectively scoped
            to this <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> instance.  It will not promote
            add or remove requests.
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AuthorizationContext.Instance">
            <summary>
            Gets the object instance being authorized.
            </summary>
            <value>This value may be <c>null</c> in situations where no object instance is available, 
            such as when authorizing queries or evaluating whether an operation can be attempted.
            <para>
            Subclasses of <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationAttribute"/> that depend on this value to
            perform instance-level authorization should check for <c>null</c>, and if everything
            else is acceptable, they should allow the authorization request.
            </para>
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AuthorizationContext.Items">
            <summary>
            Gets the dictionary of key/value pairs associated with this context.
            </summary>
            <value>This property will never return <c>null</c>, but the dictionary may be empty.  Changes made
            to items in this dictionary will never affect the original dictionary specified in the constructor.</value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AuthorizationContext.Operation">
            <summary>
            Gets the name of the operation being authorized.
            </summary>
            <value>This value will never be null or empty.  It reflects
            the developer's operation name, such as "GetEmployees".</value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AuthorizationContext.OperationType">
            <summary>
            Gets the kind of the operation being authorized.
            </summary>
            <value>This value will never be null or empty.  It reflects the category of
            the operation being authorized.  Example values are "Query" and "Invoke".</value>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.AuthorizationResult">
            <summary>
            Container class for the results of a authorization request.
            </summary>
            <remarks>
            See <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationAttribute"/> for details regarding the
            usage of this class.
            <para>
            Use the static <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> to represent successful authorization.
            Any other non-null instance of this class is considered to be a denial of an authorization request.
            </para>
            </remarks>
        </member>
        <member name="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed">
            <summary>
            Gets an <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/> that indicates the requested operation is allowed.
            </summary>
            <remarks>
            The <c>null</c> value is used to indicate authorization approval.  Consumers and providers of <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/>
            should use <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> rather than an explicit <c>null</c>.
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationResult.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/>.
            </summary>
            <remarks>This form of the constructor is meant to be used for denial of authorization.
            Authorization approval is always done with <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/>
            </remarks>
            <param name="errorMessage">The user-visible error message.</param>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AuthorizationResult.ErrorMessage">
            <summary>
            Gets the error message describing why authorization was denied.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ChangeOperation">
            <summary>
            Enumeration of the types of update operations that
            can be performed on an object.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.ChangeOperation.None">
            <summary>
            No update to perform
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.ChangeOperation.Insert">
            <summary>
            An Insert operation
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.ChangeOperation.Update">
            <summary>
            An Update operation
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.ChangeOperation.Delete">
            <summary>
            A Delete operation
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.CodeProcessor">
            <summary>
            Base class for all <see cref="T:System.ServiceModel.DomainServices.Server.CodeProcessor"/> implementations. By associating a <see cref="T:System.ServiceModel.DomainServices.Server.CodeProcessor"/> Type
            with a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> Type via the <see cref="T:System.ServiceModel.DomainServices.DomainIdentifierAttribute"/>, codegen for the service
            Type can be customized.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.CodeProcessor._codeDomProvider">
            <summary>
            Private reference to the <see cref="P:System.ServiceModel.DomainServices.Server.CodeProcessor.CodeDomProvider"/> used during <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> code generation.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.CodeProcessor.#ctor(System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Default constructor.
            </summary>
            <param name="codeDomProvider">The <see cref="P:System.ServiceModel.DomainServices.Server.CodeProcessor.CodeDomProvider"/> used during <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> code generation.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.CodeProcessor.ProcessGeneratedCode(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.CodeDom.CodeCompileUnit,System.Collections.Generic.IDictionary{System.Type,System.CodeDom.CodeTypeDeclaration})">
            <summary>
            Invoked after code generation of the current <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> has completed, allowing for post processing of the <see cref="T:System.CodeDom.CodeCompileUnit"/>.
            </summary>
            <param name="domainServiceDescription">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> describing the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> currently being examined.</param>
            <param name="codeCompileUnit">The <see cref="T:System.CodeDom.CodeCompileUnit"/> that the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> client code is being generated into.</param>
            <param name="typeMapping">A dictionary mapping <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> and related entity types to their corresponding <see cref="T:System.CodeDom.CodeTypeDeclaration"/>s.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.CodeProcessor.CodeDomProvider">
            <summary>
            The <see cref="P:System.ServiceModel.DomainServices.Server.CodeProcessor.CodeDomProvider"/> used during <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> code generation.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ChangeSet">
            <summary>
            Represents a set of changes to be processed by a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.#ctor(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Initializes a new instance of the ChangeSet class
            </summary>
            <param name="changeSetEntries">The set of <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/> items this <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/> represents.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="changeSetEntries"/> is null.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.ValidateChangeSetEntries(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Validates that the specified entries are well formed.
            </summary>
            <param name="changeSetEntries">The changeset entries to validate.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.ValidateAssociationMap(System.Type,System.Collections.Generic.HashSet{System.Int32},System.Collections.Generic.IDictionary{System.String,System.Int32[]})">
            <summary>
            Validates the specified association map.
            </summary>
            <param name="entityType">The entity type the association is on.</param>
            <param name="idSet">The set of all unique Ids in the changeset.</param>
            <param name="associationMap">The association map to validate.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.Replace``1(``0,``0)">
            <summary>
            Replaces <paramref name="clientEntity"/> with <paramref name="returnedEntity"/> in all 
            <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/>s contained in the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/>.
            </summary>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="clientEntity">The client modified entity.</param>
            <param name="returnedEntity">The server modified entity.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="clientEntity"/> or 
            <paramref name="returnedEntity"/> is null.</exception>
            <exception cref="T:System.ArgumentException">if <paramref name="clientEntity"/> is not found in 
            the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/>'s <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/> items.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.GetOriginal``1(``0)">
            <summary>
            Returns the original unmodified entity for the provided <paramref name="clientEntity"/>.
            </summary>
            <remarks>
            Note that only members marked with <see cref="T:System.ComponentModel.DataAnnotations.RoundtripOriginalAttribute"/> will be set
            in the returned instance.
            </remarks>
            <typeparam name="TEntity">The entity type.</typeparam>
            <param name="clientEntity">The client modified entity.</param>
            <returns>The original unmodified entity for the provided <paramref name="clientEntity"/>.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="clientEntity"/> is null.</exception>
            <exception cref="T:System.ArgumentException">if <paramref name="clientEntity"/> is not in the change set.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.GetChangeOperation(System.Object)">
            <summary>
            Gets the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeOperation"/> for the specified member
            of this changeset. If the changeset doesn't contain an operation
            for the object specified, 'None' is returned.
            </summary>
            <param name="entity">The entity to get the status for.</param>
            <returns>The <see cref="T:System.ServiceModel.DomainServices.Server.ChangeOperation"/> for the specified object.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.GetAssociatedChanges``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            For the compositional association indicated by <paramref name="expression"/>, this 
            method returns a collection of children of that association that are in this 
            <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/>. The returned collection will include all children, including
            any to be deleted as well as any that are unmodified.
            </summary>
            <typeparam name="TEntity">The parent Type to get associated changes for.</typeparam>
            <typeparam name="TResult">The Type of the association member.</typeparam>
            <param name="entity">The parent instance.</param>
            <param name="expression">Expression that refers to the compositional association member. The
            member must be marked with <see cref="T:System.ComponentModel.DataAnnotations.CompositionAttribute"/>.</param>
            <returns>The collection of children for the association specified.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.GetAssociatedChanges``2(``0,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.ServiceModel.DomainServices.Server.ChangeOperation)">
            <summary>
            For the compositional association indicated by <paramref name="expression"/>, this 
            method returns a collection of children of that association that are in this 
            <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/>. The returned collection will include all children, including
            any to be deleted as well as any that are unmodified.
            </summary>
            <typeparam name="TEntity">The parent Type to get associated changes for.</typeparam>
            <typeparam name="TResult">The Type of the association member.</typeparam>
            <param name="entity">The parent instance.</param>
            <param name="expression">Expression that refers to the compositional association member. The
            member must be marked with <see cref="T:System.ComponentModel.DataAnnotations.CompositionAttribute"/>.</param>
            <param name="operationType">The operation type to return changes for.</param>
            <returns>The collection of children for the association specified.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.HasChildChanges(System.Object)">
            <summary>
            Determines whether there are any changes in this changeset for
            composed children of the specified entity.
            </summary>
            <param name="entity">The entity to check.</param>
            <returns>True if there are child changes, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.GetAssociatedChanges(System.Object)">
            <summary>
            Returns a map of composition members to associated child operations for the specified
            entity, caching the results.
            </summary>
            <param name="entity">The entity to get associated changes for.</param>
            <returns>The map of child changes.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.OrderChangeset(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Reorders the specified changeset operations to respect compositional hierarchy ordering
            rules. For compositional hierarchies, all parent operations are ordered before operations
            on their children, recursively.
            </summary>
            <param name="changeSetEntries">The changeset operations to order.</param>
            <returns>The ordered operations.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.OrderOperations(System.ServiceModel.DomainServices.Server.ChangeSetEntry,System.Collections.Generic.Dictionary{System.ServiceModel.DomainServices.Server.ChangeSetEntry,System.Collections.Generic.List{System.ServiceModel.DomainServices.Server.ChangeSetEntry}},System.Collections.Generic.List{System.ServiceModel.DomainServices.Server.ChangeSetEntry})">
            <summary>
            Recursively orders the specified operation and all child operations, adding them to the
            <paramref name="orderedOperations"/> list.
            </summary>
            <param name="operation">The operation to order.</param>
            <param name="operationChildMap">Map of operation to child operations.</param>
            <param name="orderedOperations">The list of ordered operations.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.Associate``2(``0,``1,System.Action{``0,``1})">
            <summary>
            Associates a given entity with a store entity.  This method is intended for use by scenarios where a
            client entity may represent a projection of one or multiple data store entities.
            </summary>
            <typeparam name="TEntity">The client entity type.</typeparam>
            <typeparam name="TStoreEntity">The data store entity type.</typeparam>
            <param name="clientEntity">The client entity.</param>
            <param name="storeEntity">The data store entity.</param>
            <param name="storeToClientTransform">The entity transform. This delegate will be invoked after the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/> has
            been successfully submitted and is intended to flow <paramref name="storeEntity"/> values back to the
            <paramref name="clientEntity"/>.</param>
            <exception cref="T:System.ArgumentNullException">if <paramref name="clientEntity"/>, <paramref name="storeEntity"/> or 
            <paramref name="storeToClientTransform"/> is null.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.GetAssociatedEntities``2(``1)">
            <summary>
            Returns a collection of entities of the given type associated 
            with a given data store entity.
            </summary>
            <typeparam name="TEntity">The client entity type.</typeparam>
            <typeparam name="TStoreEntity">The data store entity type.</typeparam>
            <param name="storeEntity">The data store entity.</param>
            <returns>Returns a collection of associated entities.</returns>
            <exception cref="T:System.ArgumentNullException">if <paramref name="storeEntity"/> is null.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.ApplyAssociatedStoreEntityTransforms">
            <summary>
            Applies all entity transformation actions registered using the <see cref="M:System.ServiceModel.DomainServices.Server.ChangeSet.Associate``2(``0,``1,System.Action{``0,``1})"/> method.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.CommitReplacedEntities">
            <summary>
            Updates the current changeset entities with the corresponding replacement entities.
            </summary>
            <seealso cref="M:System.ServiceModel.DomainServices.Server.ChangeSet.Replace``1(``0,``0)"/>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSet.ChangeSetEntries">
            <summary>
            Gets the set of <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/> items this <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSet"/> represents.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSet.HasError">
            <summary>
            Gets a value indicating whether any of the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/> items has an error.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSet.EntitiesToReplace">
            <summary>
            A dictionary containing entities (key) and associated replace entities (value) as registered by
            calling <see cref="M:System.ServiceModel.DomainServices.Server.ChangeSet.Replace``1(``0,``0)"/>.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSet.AssociatedStoreEntities">
            <summary>
            A dictionary containing store entities (key) and a collection of associated client entities.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ChangeSet.AssociatedEntityInfo">
            <summary>
            Tuple used to represent a client entity and its associated transformation delegate.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.AssociatedEntityInfo.#ctor(System.Object,System.Action)">
            <summary>
            Default constructor.
            </summary>
            <param name="clientEntity">The model entity.</param>
            <param name="entityTransform">The entity transform.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSet.AssociatedEntityInfo.ApplyTransform">
            <summary>
            Invokes the entity transform delegate and unwraps any 
            <see cref="T:System.Reflection.TargetInvocationException"/> errors encountered.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSet.AssociatedEntityInfo.ClientEntity">
            <summary>
            Gets the client entity.
            </summary>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.CompositionAttribute">
            <summary>
            Attribute applied to an association member to indicate that the
            association is a compositional relationship.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainPropertyDescriptor">
            <summary>
            PropertyDescriptor for general domain Type properties.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainTypeDescriptor">
            <summary>
            Custom TypeDescriptor for domain Types exposed by a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainTypeDescriptor.GetAdditionalAttributes(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Return an array of new attributes for the specified PropertyDescriptor. If no
            attributes need to be added, return an empty array.
            </summary>
            <param name="pd">The property to add attributes for.</param>
            <returns>The collection of new attributes.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainTypeDescriptor.ShouldRegister(System.ComponentModel.ICustomTypeDescriptor,System.Boolean,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Determines whether a type uses any features requiring the
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainTypeDescriptionProvider"/> to be registered. We do this
            check as an optimization so we're not adding additional TDPs to the
            chain when they're not necessary.
            </summary>
            <param name="descriptor">The descriptor for the type to check.</param>
            <param name="keyIsEditable">Indicates whether the key for this Type is editable.</param>
            <param name="foreignKeyMembers">The set of foreign key members for the Type.</param>
            <returns>Returns <c>true</c> if the type uses any features requiring the
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainTypeDescriptionProvider"/> to be registered.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainTypeDescriptor.ShouldAddRoundTripAttribute(System.ComponentModel.PropertyDescriptor,System.Boolean)">
            <summary>
            Returns true if the specified member requires a RoundTripOriginalAttribute
            and one isn't already present.
            </summary>
            <param name="pd">The member to check.</param>
            <param name="isFkMember">True if the member is a foreign key, false otherwise.</param>
            <returns>True if RoundTripOriginalAttribute should be added, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainTypeDescriptor.ShouldAddEditableFalseAttribute(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Boolean@)">
            <summary>
            Returns <c>true</c> if the specified member requires an <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute"/>
            to make the member read-only and one isn't already present.
            </summary>
            <param name="pd">The member to check.</param>
            <param name="keyIsEditable">Indicates whether the key for this Type is editable.</param>
            <param name="allowInitialValue">
            The default that should be used for <see cref="P:System.ComponentModel.DataAnnotations.EditableAttribute.AllowInitialValue"/> if the attribute
            should be added to the member.
            </param>
            <returns><c>true</c> if <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute"/> should be added, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainTypeDescriptor.ShouldInferAttributes(System.ComponentModel.PropertyDescriptor,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Determines if there are any attributes that can be inferred for the specified member.
            </summary>
            <param name="pd">The member to check.</param>
            <param name="keyIsEditable">Indicates whether the key for this Type is editable.</param>
            <param name="foreignKeyMembers">Collection of foreign key members for the Type.</param>
            <returns><c>true</c> if there are attributes to be inferred, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.GetFactoryMethod(System.Reflection.ConstructorInfo,System.Type)">
            <summary>
            Gets a factory method for a late-bound type.
            </summary>
            <remarks>
            This method will return a delegate to a factory method that looks like this:
            <code>
            public object FactoryMethod([object[, object]*]) {
                return &lt;Constructor&gt;([object[, object]*]);
            }
            </code>
            </remarks>
            <param name="ctor">The constructor to invoke.</param>
            <param name="delegateType">The type of delegate to return.</param>
            <returns>A factory method delegate.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.GetDelegateForMethod(System.Reflection.MethodInfo)">
            <summary>
            Gets an early-bound delegate for an instance method.
            </summary>
            <remarks>
            This method will return a delegate to a proxy method that looks like this:
            <code>
            public object &lt;MethodName&gt;(DomainService target, object[] parameters) {
                return ((&lt;TargetType&gt;)target).&lt;MethodName&gt;();
                return ((&lt;TargetType&gt;)target).&lt;MethodName&gt;((&lt;ParameterType&gt;)parameters[0]);
            }
            </code>
            </remarks>
            <param name="method">The method that the delegate should invoke.</param>
            <returns>A delegate.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.EmitToObjectConversion(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits a conversion to type object for the value on the stack.
            </summary>
            <param name="generator">The code generator to use.</param>
            <param name="sourceType">The type of value on the stack.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DynamicMethodUtility.EmitFromObjectConversion(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>
            Emits a conversion from type object for the value on the stack.
            </summary>
            <param name="generator">The code generator to use.</param>
            <param name="targetType">The type to which the value on the stack needs to be converted.</param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.InvokeDescription">
            <summary>
            Represents an invoke operation to be processed by a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.InvokeDescription.#ctor(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object[])">
            <summary>
            Initializes a new instance of the InvokeDescription class
            </summary>
            <param name="domainOperationEntry">The invoke operation to be processed</param>
            <param name="parameterValues">The parameter values for the method if it requires any.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.InvokeDescription.Method">
            <summary>
            Gets the invoke operation to be processed
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.InvokeDescription.ParameterValues">
            <summary>
            Gets the parameter values for the method if it requires any
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.MemberProjectionPropertyDescriptor">
            <summary>
            PropertyDescriptor for a member projection.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MemberProjectionPropertyDescriptor.Attributes">
            <summary>
            We must override Attributes and compute them dynamically to get around TD registration ordering issues
            for projection include members. The issue is that it might be the case that custom TDs havent been registered
            yet for the target property at the point in time when the projection property is created. That would mean
            that all attributes aren't yet known when the projection property descriptor is created, so the attributes
            can't be set at construction time.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.MetaType">
            <summary>
            Class providing additional "meta" information for a Type.
            <remarks>
            Consider adding any commonly accessed or computed information about a Type
            to this class, to improve performance and code factoring.
            </remarks>
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.MetaType.GetMetaType(System.Type)">
            <summary>
            Returns the MetaType for the specified Type.
            <remarks>The MetaType should only be accessed AFTER all TypeDescriptors have
            been registered (i.e. after all DomainServiceDescriptions for services exposing
            the Type have been initialized).</remarks>
            </summary>
            <param name="type">The Type to provide the MetaType for.</param>
            <returns>The constructed MetaType.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.MetaType.CalculateAttributesRecursive(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            This recursive function visits every property in the type tree. For each property,
            we inspect the attributes and set meta attributes as needed.
            </summary>
            <param name="type">The root type to calculate attributes for.</param>
            <param name="visited">Visited set for recursion.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.Members">
            <summary>
            Gets the collection of members for this Type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.DataMembers">
            <summary>
            Gets the collection of data members for this Type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.Type">
            <summary>
            Gets the underlying CLR type for this MetaType
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.IncludedAssociations">
            <summary>
            Gets the collection of association members that have an IncludeAttribute applied
            to them.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.ProjectionMemberMap">
            <summary>
            Gets a map of all projection includes for each property.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.IsComplex">
            <summary>
            Gets a value indicating whether this is a ComplexType.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.RequiresValidation">
            <summary>
            Gets a value indicating whether the Type has any Type or member level
            validation attributes applied. The check is recursive through any complex
            type members.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.HasComposition">
            <summary>
            Gets a value indicating whether the Type has any members marked with
            CompositionAttribute.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaType.ValidationAttributes">
            <summary>
            Gets the Type level validation errors for the underlying Type.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.MetaMember">
            <summary>
            This class caches all the interesting attributes of an property.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaMember.IsCollection">
            <summary>
            Gets or sets a value indicating whether this member is a supported collection type.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.MetaMember.RequiresValidation">
            <summary>
            Returns <c>true</c> if the member has a property validator.
            </summary>
            <remarks>The return value does not take into account whether or not the member requires
            type validation.</remarks>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.OutputCacheLocation">
            <summary>
            Specifies the valid values for controlling the location of the output-cached HTTP response for a resource.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.OutputCacheLocation.Any">
            <summary>
            The output cache can be located on the browser client (where the request originated), on a proxy server 
            (or any other server) participating in the request, or on the server where the request was processed.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.OutputCacheLocation.Client">
            <summary>
            The output cache is located on the browser client where the request originated.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.OutputCacheLocation.Downstream">
            <summary>
            The output cache can be stored in any HTTP 1.1 cache-capable devices other than the origin server. This 
            includes proxy servers and the client that made the request.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.OutputCacheLocation.Server">
            <summary>
            The output cache is located on the Web server where the request was processed.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.OutputCacheLocation.None">
            <summary>
            The output cache is disabled for the requested page.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.OutputCacheLocation.ServerAndClient">
            <summary>
            The output cache can be stored only at the origin server or at the requesting client. Proxy servers are not allowed to cache the response.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainOperationParameter">
            <summary>
            Represents a parameter to a domain operation
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainOperationParameter.#ctor(System.String,System.Type,System.ComponentModel.AttributeCollection)">
            <summary>
            Initializes a new instance of the DomainOperationParameter class
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="parameterType">The Type of the parameter</param>
            <param name="attributes">The set of attributes for the parameter</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainOperationParameter.#ctor(System.String,System.Type,System.ComponentModel.AttributeCollection,System.Boolean)">
            <summary>
            Initializes a new instance of the DomainOperationParameter class
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="parameterType">The Type of the parameter</param>   
            <param name="attributes">The set of attributes for the parameter</param>
            <param name="isOut">Indicates whether the parameter is a out parameter</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainOperationParameter.ToString">
            <summary>
            Returns a textual description of the parameter.
            </summary>
            <returns>A string representation of the parameter.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationParameter.Name">
            <summary>
            Gets the name of the parameter
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationParameter.ParameterType">
            <summary>
            Gets the Type of the parameter
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationParameter.Attributes">
            <summary>
            Gets the set of attributes for the parameter
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationParameter.IsOut">
            <summary>
            Gets a value indicating whether the parameter is an out parameter
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainOperationType">
            <summary>
            Enumeration of the core operations a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> can perform.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperationType.Query">
            <summary>
            Indicates a query operation.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperationType.Submit">
            <summary>
            Indicates a submit operation.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperationType.Invoke">
            <summary>
            Indicates an invoke operation.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperationType.Metadata">
            <summary>
            Indicates a metadata analysis operation
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider">
            <summary>
            A <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider"/> is used to provide the metadata description of a
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> and the types and operations it exposes.
            </summary>
            <remarks>
            A <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider"/> is responsible for creation of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/>
            as well as custom <see cref="T:System.ComponentModel.TypeDescriptor"/>s for types returned from the service. A provider can be declaratively
            associated with a service using the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProviderAttribute"/>.
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider"/>s are chained together by passing in the parent provider on construction.
            </remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.#ctor(System.Type,System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider)">
            <summary>
            Protected Constructor
            </summary>
            <param name="domainServiceType">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> type this provider will create a description for.</param>
            <param name="parent">The existing parent description provider. May be null.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.GetDescription">
            <summary>
            Gets the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> for the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> Type. Overrides should
            call base and either extend the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> returned or use it as input in creating
            an entirely new <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/>.
            </summary>
            <remarks>
            This method can extend the base <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> with new operations by calling
            <see cref="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.AddOperation(System.ServiceModel.DomainServices.Server.DomainOperationEntry)"/>.
            </remarks>
            <returns>The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> for the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> Type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.GetTypeDescriptor(System.Type,System.ComponentModel.ICustomTypeDescriptor)">
            <summary>
            Gets the <see cref="T:System.ComponentModel.TypeDescriptor"/> for the specified Type, using the specified parent descriptor
            as the base. Overrides should call base to ensure the <see cref="T:System.ComponentModel.TypeDescriptor"/>s are chained properly.
            </summary>
            <param name="type">The Type to return a descriptor for.</param>
            <param name="parent">The parent descriptor.</param>
            <returns>The <see cref="T:System.ComponentModel.TypeDescriptor"/> for the specified Type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.LookupIsEntityType(System.Type)">
            <summary>
            Determines if the specified <see cref="T:System.Type"/> should be considered an entity <see cref="T:System.Type"/>.
            The base implementation returns <c>false</c>.
            </summary>
            <remarks>Effectively, the return from this method is this provider's vote as to whether the specified
            Type is an entity. The votes from this provider and all other providers in the chain are used
            by <see cref="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.IsEntityType(System.Type)"/> to make it's determination.</remarks>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <returns>Returns <c>true</c> if the <see cref="T:System.Type"/> should be considered an entity,
            <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.GetOperationAttributes(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            This method is called after the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> has been created, and allows
            additional metadata to be added to the specified operation. Overrides should call base to get the
            initial set of attributes, and any additional attributes should be added to those.
            </summary>
            <param name="operation">The operation to return attributes for.</param>
            <returns>The operation attributes.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.IsEntityType(System.Type)">
            <summary>
            Determines if the specified <see cref="T:System.Type"/> is an entity <see cref="T:System.Type"/> by consulting
            the <see cref="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.LookupIsEntityType(System.Type)"/> method of all <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider"/>s
            in the provider chain for the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> being described.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <returns>Returns <c>true</c> if the <see cref="T:System.Type"/> is an entity, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.SetIsEntityTypeFunc(System.Func{System.Type,System.Boolean})">
            <summary>
            Sets the internal entity lookup function for this provider. The function consults
            the entire provider chain to make its determination.
            </summary>
            <param name="isEntityTypeFunc">The entity function.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.CreateDescription">
            <summary>
            Factory method used to create an empty <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/>.
            </summary>
            <returns>A new description.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.CreateDescription(System.ServiceModel.DomainServices.Server.DomainServiceDescription)">
            <summary>
            Factory method used to create <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> based on the specified description.
            </summary>
            <param name="baseDescription">The base description.</param>
            <returns>A new description based on the base description.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider.ParentProvider">
            <summary>
            Gets the parent description provider.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProviderAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> type to specify the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider"/>
            for the type.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProviderAttribute.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the DomainServiceDescriptionProviderAttribute class
            </summary>
            <param name="domainServiceDescriptionProviderType">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider"/> type</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProviderAttribute.CreateProvider(System.Type,System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider)">
            <summary>
            This method creates an instance of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider"/>. Subclasses can override this
            method to provide their own construction logic.
            </summary>
            <param name="domainServiceType">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> type to create a description provider for.</param>
            <param name="parent">The parent description provider. May be null.</param>
            <returns>The description provider</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProviderAttribute.DomainServiceDescriptionProviderType">
            <summary>
            Gets the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider"/> type
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProviderAttribute.TypeId">
            <summary>
            Gets a unique identifier for this attribute.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainServiceErrorInfo">
            <summary>
            Represents an unrecoverable error that occurred during the
            processing of a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> operation.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceErrorInfo.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceErrorInfo"/> class.
            </summary>
            <param name="exception">The exception that occurred.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceErrorInfo.Error">
            <summary>
            Gets or sets the exception that occurred.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainTypeDescriptionProvider">
            <summary>
            Custom TypeDescriptionProvider conditionally registered for Types exposed by a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            This provider is used to dynamically add properties or member attributes to Types.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainTypeDescriptionProvider.GetForeignKeyMembers">
            <summary>
            Returns the set of all foreign key members for the entity.
            </summary>
            <returns>The set of foreign keys.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.IgnoreAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> member to indicate that domain
            operations should not be inferred from the member.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.OutputCacheAttribute">
            <summary>
            Provides a declarative way to enable output caching.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.OutputCacheAttribute.#ctor(System.ServiceModel.DomainServices.Server.OutputCacheLocation)">
            <summary>
            Initializes a new instance of the OutputCacheAttribute class
            </summary>
            <param name="location">The location(s) where caching can be applied.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.OutputCacheAttribute.#ctor(System.ServiceModel.DomainServices.Server.OutputCacheLocation,System.Int32)">
            <summary>
            Initializes a new instance of the OutputCacheAttribute class
            </summary>
            <param name="location">The location(s) where caching can be applied.</param>
            <param name="duration">The duration in seconds for which the response should be cached.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.OutputCacheAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the OutputCacheAttribute class
            </summary>
            <param name="cacheProfile">The name of the cache settings.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.OutputCacheAttribute.CacheProfile">
            <summary>
            Gets the name of the cache settings
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.OutputCacheAttribute.Duration">
            <summary>
            Gets the duration in seconds for which the response should be cached.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.OutputCacheAttribute.Location">
            <summary>
            Gets the location(s) where caching can be applied.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.OutputCacheAttribute.UseSlidingExpiration">
            <summary>
            Gets or sets whether the duration should be a sliding expiration or an absolute expiration.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.OutputCacheAttribute.VaryByHeaders">
            <summary>
            Gets or sets the headers on which a cached response is based.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.OutputCacheAttribute.SqlCacheDependencies">
            <summary>
            Gets or sets the SQL cache dependencies.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.KnownTypeUtilities">
            <summary>
            Utility class to deal with <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/>
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.KnownTypeUtilities.ImportKnownTypes(System.Type,System.Boolean)">
            <summary>
            Obtains the set of known types from the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/> custom attributes
            attached to the specified <paramref name="type"/>.
            </summary>
            <remarks>
            This utility function duplicates what WCF does by either retrieving the declared
            types or invoking the method declared in <see cref="P:System.Runtime.Serialization.KnownTypeAttribute.MethodName"/>.
            </remarks>
            <param name="type">The type to examine for <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/>s</param>
            <param name="inherit"><c>true</c> to allow inheritance of <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/> from the base.</param>
            <returns>The distinct set of types fould via the <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/>s</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider">
            <summary>
            Default reflection based description provider that implements both the attribute
            and convention based description models.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.LookupIsEntityType(System.Type)">
            <summary>
            Returns true if the Type has at least one member marked with KeyAttribute.
            </summary>
            <param name="type">The Type to check.</param>
            <returns>True if the Type is an entity, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.RegisterAssociatedMetadataProvider(System.Reflection.MethodInfo)">
            <summary>
            Register the associated metadata provider for Types in the signature
            of the specified method as required.
            </summary>
            <param name="methodInfo">The method to register for.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.RegisterAssociatedMetadataTypeTypeDescriptor(System.Type)">
            <summary>
            Verifies that the <see cref="T:System.ComponentModel.DataAnnotations.MetadataTypeAttribute"/> reference does not contain a cyclic reference and 
            registers the AssociatedMetadataTypeTypeDescriptionProvider in that case.
            </summary>
            <param name="type">The entity type with the MetadataType attribute.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ClassifyDomainOperation(System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry)">
            <summary>
            This method classifies an operation by setting its its operation type.
            </summary>
            <remarks>Domain operations are either explicitly marked with attributes, or they follow a naming/signature convention.</remarks>
            <param name="operation">The domain operation to inspect.</param>
            <returns>True if the operation is attributed or matches convention; false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.TryClassifyImplicitDomainOperation(System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry)">
            <summary>
            Classifies a domain operation based on naming convention.
            </summary>
            <param name="operation">The domain operation to inspect.</param>
            <returns>True if the operation matches a convention; false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.IsQueryMethod(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Returns true if the specified operation should be inferred as an
            IEnumerable or singleton returning query method. Also checks if the 
            base element type or the type of the singleton is a valid entity type.
            </summary>
            <param name="operation">The operation to inspect.</param>
            <returns>True if the operation is a query method, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.IsCustomMethod(System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry)">
            <summary>
            We need to avoid false positive convention based classification of
            Custom methods. This method verifies that candidate Custom methods
            have the correct signature.
            </summary>
            <param name="operation">The operation to inspect</param>
            <returns>True if the method has a valid signature</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.GetDomainServiceTypeAttributes(System.Type)">
            <summary>
            This method returns a collection of attributes representing attributes on the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> <see cref="T:System.Type"/>.
            </summary>
            <param name="domainServiceType">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> <see cref="T:System.Type"/>.</param>
            <returns>An <see cref="T:System.ComponentModel.AttributeCollection"/> decorated on the <see cref="T:System.Type"/> directly as well as attributes surfaced from interface
            implementations.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.IsInvokeOperation(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Returns true if the specified operation should be inferred as an invoke operation.
            </summary>
            <param name="operation">The operation to inspect.</param>
            <returns>True if the operation is an invoke operation, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.IsPredefinedOrComplexType(System.Type)">
            <summary>
            Returns <c>true</c> if the given type one of our supported simple types (or a collection thereof),
            or if the type is a complex type (or a collection thereof).
            </summary>
            <param name="type">The type to test</param>
            <returns><c>true</c> if the type is a primitive or one of the accepted types</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.MergeAttributes(System.Collections.Generic.List{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Merge attributes existing on a type and interface (implemented by type).
            Attributes that allow for multiple are aggregated.  Attributes that allow single use are
            effectively overridden by class use.  Attributes that allow single use and exist on multiple
            interfaces (but not the implementing class) are merged arbitrarily.
            </summary>
            <param name="typeAttributes">DomainService type-level attributes.</param>
            <param name="interfaceAttributes">Interface type-level attributes to merge.</param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry">
            <summary>
            Reflection based domain operation entry
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry">
            <summary>
            Represents a domain operation method within a DomainService
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainOperationEntry.#ctor(System.Type,System.String,System.ServiceModel.DomainServices.Server.DomainOperation,System.Type,System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.DomainOperationParameter},System.ComponentModel.AttributeCollection)">
            <summary>
            Initializes a new instance of the DomainOperationEntry class
            </summary>
            <param name="domainServiceType">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> Type this operation is a member of.</param>
            <param name="name">The name of the operation</param>
            <param name="operation">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperation"/></param>
            <param name="returnType">The return Type of the operation</param>
            <param name="parameters">The parameter definitions for the operation</param>
            <param name="attributes">The method level attributes for the operation</param>  
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainOperationEntry.InitializeOperationAttribute">
            <summary>
            Based on the operation type specified, create the default corresponding attribute
            if it hasn't been specified explicitly, and add it to the attributes collection.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainOperationEntry.Invoke(System.ServiceModel.DomainServices.Server.DomainService,System.Object[])">
            <summary>
            Invokes this <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.
            </summary>
            <param name="domainService">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance the operation is being invoked on.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>The return value of the invoked method.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainOperationEntry.Invoke(System.ServiceModel.DomainServices.Server.DomainService,System.Object[],System.Int32@)">
            <summary>
            Invokes this <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.
            </summary>
            <param name="domainService">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance the operation is being invoked on.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <param name="totalCount">The total number of rows for the input query without any paging applied to it.</param>
            <returns>The return value of the invoked method.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainOperationEntry.ToString">
            <summary>
            Returns a textual description of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.
            </summary>
            <returns>A string representation of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.OperationType">
            <summary>
            Gets a string value indicating the logical operation type
            corresponding to the current <see cref="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.Operation"/> value.
            </summary>
            <value>
            The value returned by this property is used in <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationContext.OperationType"/>
            to describe the category of operation being authorized.
            <para>This helper property exists to avoid the overhead of <see cref="M:System.Enum.GetName(System.Type,System.Object)"/> and
            to map"Custom" into "Update".  These strings are not localized because they are meant
            to be used in authorization rules that work independent of culture.
            </para>
            </value>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.DomainServiceType">
            <summary>
            Gets the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> Type this operation is a member of.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.Name">
            <summary>
            Gets the name of the operation
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.OperationAttribute">
            <summary>
            Gets the attribute that contains metadata about the operation.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.RequiresValidation">
            <summary>
            Gets a value indicating whether this operation requires validation.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.RequiresAuthorization">
            <summary>
            Gets a value indicating whether this operation requires authorization.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.Attributes">
            <summary>
            Gets the attributes for the operation
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.ReturnType">
            <summary>
            Gets the return Type of the operation
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.Parameters">
            <summary>
            Gets the parameters of the operation
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.Operation">
            <summary>
            Gets the type of domain operation implemented by the method.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainOperationEntry.AssociatedType">
            <summary>
            Returns the associated Type this DomainOperation operates on. For query methods
            this will be the element type of the return type (or the singleton return Type),
            and for all other methods this will be the Type of the first method parameter.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.#ctor(System.Type,System.Reflection.MethodInfo,System.ServiceModel.DomainServices.Server.DomainOperation)">
            <summary>
            Creates an instance of a <see cref="T:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry"/>.
            </summary>
            <param name="domainServiceType">The DomainService Type the method belongs to.</param>
            <param name="methodInfo">The MethodInfo of the method.</param>
            <param name="operation">The operation.</param>         
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.Invoke(System.ServiceModel.DomainServices.Server.DomainService,System.Object[])">
            <summary>
            Invokes this <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.
            </summary>
            <param name="domainService">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance the operation is being invoked on.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <returns>The return value of the invoked method.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.GetAttributeCollection(System.Reflection.MethodInfo)">
            <summary>
            Returns a collection of attributes that are defined on the <paramref name="methodInfo"/> as well as any
            underlying interface definitions.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> to return attributes for.</param>
            <returns>A collection of attributes.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.MergeAttributes(System.Collections.Generic.List{System.Attribute},System.Collections.Generic.IEnumerable{System.Attribute})">
            <summary>
            Merge attributes already existing on a MethodInfo with those defined at the interface level. 
            Here, we will selectively add interface attributes if they are valid and not in conflict with
            any attributes already defined on the method.
            </summary>
            <param name="methodAttributes">Method-level attributes.</param>
            <param name="interfaceAttributes">Interface method-level attributes to merge.</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ReflectionDomainServiceDescriptionProvider.ReflectionDomainOperationEntry.IsInferred">
            <summary>
            Gets a value indicating whether this operation was inferred, or is explicitly attributed.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.InsertAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> method to indicate that it is an insert method.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.InvokeAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> method to indicate that it is an invoke operation.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.InvokeAttribute.HasSideEffects">
            <summary>
            Gets or sets a value indicating whether the invoke operation has side-effects.
            </summary>
            <remarks>
            Operations with side-effects may be invoked differently by consumers of a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>. For example, 
            clients that invoke a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> over HTTP may use POST requests for invoke operations with side-effects, 
            while GET may be used otherwise.
            
            The value of this property is <c>true</c> by default.
            </remarks>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DeleteAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> method to indicate that it is a delete method.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.UpdateAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> method to indicate that it is an update method.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.UpdateAttribute.UsingCustomMethod">
            <summary>
            Gets or sets a value indicating whether the method is a custom update operation.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.QueryAttribute">
            <summary>
            Attribute applied to a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> method to indicate that it is a query method.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.QueryAttribute.HasSideEffects">
            <summary>
            Gets or sets a value indicating whether the query method has side-effects.
            </summary>
            <remarks>
            Queries with side-effects may be invoked differently by consumers of a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>. For example, 
            clients that invoke a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> over HTTP may use POST requests for queries with side-effects, 
            while GET may be used otherwise.
            </remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.QueryAttribute.IsComposable">
            <summary>
            Gets or sets a value indicating whether the query method allows query composition.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.QueryAttribute.ResultLimit">
            <summary>
            Gets or sets the maximum number of results a query operation should return. The default 
            is <value>0</value>, which means there is no limit.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.QueryAttribute.IsDefault">
            <summary>
            Gets or sets a value indicating whether the query method should be treated
            as the default query when multiple query methods are available.
            </summary>
            <value>This value defaults to <c>false</c> unless otherwise specified.</value>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.RequiresRoleAttribute">
            <summary>
            Identifies a set of roles that are permitted to invoke a <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.
            </summary>
            <remarks>
            This attribute is used to specify a set of roles that are required.  It is a subclass
            of <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationAttribute"/> and meant to be used on domain operations
            such as queries, update methods, etc. to control authorization.
            </remarks>
        </member>
        <member name="T:System.ComponentModel.DataAnnotations.AuthorizationAttribute">
            <summary>
            Abstract base class used to control authorization through custom metadata.
            </summary>
            <remarks>
            Subclasses of this attribute class are created for different authorization policies, and then these
            attributes can be applied to operations to ask that these policies be enforced.
            <para>Each subclass provides its own logic in its <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.IsAuthorized(System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)"/>
            method which is provided with an <see cref="T:System.Security.Principal.IPrincipal"/> and an <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/>
            to make its decision.  These subclasses may also declare their own properties that can be
            specified in the attribute declaration and which can affect the authorization logic.
            </para>
            </remarks>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.Authorize(System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)">
            <summary>
            Determines whether the given <paramref name="principal"/> is authorized to perform a specific operation
            described by the given <paramref name="authorizationContext"/>.
            </summary>
            <remarks>This method is the concrete entry point for authorization.  It delegates to the derived class's
            <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.IsAuthorized(System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)"/> method for implementation-specific authorization.
            </remarks>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/> to be authorized.</param>
            <param name="authorizationContext">The <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> describing the context in which
            authorization has been requested.</param>
            <returns>An <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/> that indicates whether the operation is allowed or denied.
            A return of <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> indicates the operation is allowed.
            A return of any other (non-null) <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/> indicates the request has been denied.
            The user visible error message for the denial is found in <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationResult.ErrorMessage"/>.
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.IsAuthorized(System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)">
            <summary>
            Implementation specific method to determine whether the given <paramref name="principal"/>
            is authorized to perform a specific operation described by 
            the given <paramref name="authorizationContext"/>.
            </summary>
            <remarks>This protected abstract method contains the implementation-specific logic for this particular
            subclass of <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationAttribute"/>.  It is invoked strictly by the public <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.Authorize(System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)"/> method.
            </remarks>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/> to be authorized.</param>
            <param name="authorizationContext">The <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> describing the context in which
            authorization has been requested.</param>
            <returns>An <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/> that indicates whether the operation is allowed or denied.
            A return of <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> indicates the operation is allowed.
            A return of any other non-null <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/> indicates the request has been denied.
            The user visible error message for the denial is found in <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationResult.ErrorMessage"/>
            </returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.FormatErrorMessage(System.String)">
            <summary>
            Gets the formatted error message for the current <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationAttribute"/> to present to the user.
            </summary>
            <remarks>
            Classes derived from <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationAttribute"/> are encouraged to use this helper
            method to retrieve the user-visible message for <see cref="P:System.ComponentModel.DataAnnotations.ValidationResult.ErrorMessage"/>
            because it encapsulates the logic to evaluate <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ResourceType"/> and <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ErrorMessage"/>.
            <para>
            If <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ErrorMessage"/> and <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ResourceType"/> are both non-null, this method
            will use Reflection to access that respective property in the respective resource type to obtain the message.
            If <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ResourceType"/> is null, it will return the literal value from <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ErrorMessage"/>.  
            But if that is blank, it will use a default localized message.
            </para>
            <para>
            The specified <paramref name="operation"/> will be included in the generated message if
            format specifiers are present in the computed message.
            </para>
            </remarks>
            <param name="operation">Name of the operation that was denied.</param>
            <returns>The error message to present to the user.</returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.CreateErrorMessageAccessor">
            <summary>
            This factory method creates a func that returns a string for the error message.
            </summary>
            <returns>A new string func that can be used by <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.FormatErrorMessage(System.String)"/></returns>
        </member>
        <member name="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.CreateErrorMessagePropertyAccessor">
            <summary>
            This factory method creates a Reflection-based string func to retrieve
            the named resource from the current resource type.
            </summary>
            <returns>A new string func that will invoke the respective property getter.</returns>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ErrorMessageAccessor">
            <summary>
            Gets an accessor that may be invoked to retrieve the runtime error message
            based on <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ErrorMessage"/> and <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ResourceType"/>
            </summary>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ErrorMessage">
            <summary>
            Gets or sets the literal error message or resource key intended to be returned
            in a <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationResult.ErrorMessage"/>.
            </summary>
            <value>This property is meant to be set in the attribute declaration, and it serves as either a literal string or
            as a resource key.
            If <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ResourceType"/> is non-null, this value is interpreted as the name of a property
            declared in <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ResourceType"/> that will return the actual error message at runtime.  This is
            the mechanism that allows localization of error messages.  If <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ResourceType"/> is null, this value
            is assumed to be a literal non-localized error message that can be used verbatim.
            </value>
        </member>
        <member name="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ResourceType">
            <summary>
            Gets or sets the <see cref="T:System.Type"/> to use as the resource manager for <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ErrorMessage"/>.
            </summary>
            <value>This property is optional.  If null, <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ErrorMessage"/> is treated as a literal string.
            But if it is not null, <see cref="P:System.ComponentModel.DataAnnotations.AuthorizationAttribute.ErrorMessage"/> is treated as the name of a static property within
            the specified <see cref="T:System.Type"/> that can be retrieved to yield the actual error message.
            </value>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.RequiresRoleAttribute._roles">
            <summary>
            The roles to which the current user must belong before the specified <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> may be invoked.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.RequiresRoleAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the RequiresRoleAttribute class
            </summary>
            <param name="role">The role to which the current user must belong before the <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> may be invoked.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.RequiresRoleAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the RequiresRoleAttribute class
            </summary>
            <param name="roles">The set of roles permitted to invoke the <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>. The
            current user must be in at least one of the roles to invoke the operation.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.RequiresRoleAttribute.IsAuthorized(System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)">
            <summary>
            Determines whether the given <paramref name="principal"/> is authorized to perform the operation
            specified by given <paramref name="authorizationContext"/>.
            </summary>
            <remarks>This method returns <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> only when the <paramref name="principal"/>
            is authenticated and belongs to at least one of the roles specified in <see cref="P:System.ServiceModel.DomainServices.Server.RequiresRoleAttribute.Roles"/>.
            <para>
            To require the principal to belong to multiple roles, multiple <see cref="T:System.ServiceModel.DomainServices.Server.RequiresRoleAttribute"/>
            custom attributes should be used on the respective operation.
            </para>
            </remarks>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/> to authorize.</param>
            <param name="authorizationContext">The <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> in which authorization is required.</param>
            <returns>A <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/> indicating whether or not the <paramref name="principal"/> is authorized.
            The value <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> indicates authorization is granted.  Any other value
            indicates it has been denied.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.RequiresRoleAttribute.Roles">
            <summary>
            Gets the roles permitted to invoke the operation.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.RequiresRoleAttribute.TypeId">
            <summary>
            Gets a unique identifier for this attribute.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.RequiresAuthenticationAttribute">
            <summary>
            Identifies the authentication requirements needed to invoke a <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.
            </summary>
            <remarks>
            This attribute is used to specify the permissions required to invoke a domain operation.
            The type containing the domain operation may also be marked with this attribute and its
            permission requirements will be applied to all domain operations within.
            </remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.RequiresAuthenticationAttribute.IsAuthorized(System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)">
            <summary>
            Determines whether the given <paramref name="principal"/> is authorized to perform the operation
            specified by given <paramref name="authorizationContext"/>.
            </summary>
            <remarks>
            This method returns <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> only when the <paramref name="principal"/>
            is authenticated.
            </remarks>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/> to authorize.</param>
            <param name="authorizationContext">The <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationContext"/> in which authorization is required.</param>
            <returns>A <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/> indicating whether or not the <paramref name="principal"/> is authorized.
            The value <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> indicates authorization is granted.  Any other value
            indicates it has been denied.</returns>        
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainOperation">
            <summary>
            Enumeration of the types of operations a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> can perform.
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperation.None">
            <summary>
            Indicates that no operation is to be performed
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperation.Query">
            <summary>
            Indicates a query operation
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperation.Insert">
            <summary>
            Indicates an operation that inserts new data
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperation.Update">
            <summary>
            Indicates an operation that updates existing data
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperation.Delete">
            <summary>
            Indicates an operation that deletes existing data
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperation.Custom">
            <summary>
            Indicates a custom domain operation that is executed in a deferred manner
            </summary>
        </member>
        <member name="F:System.ServiceModel.DomainServices.Server.DomainOperation.Invoke">
            <summary>
            Indicates a custom domain operation that is executed immediately upon invocation
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainServiceContext">
            <summary>
            Represents the execution context for a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> request.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.#ctor(System.IServiceProvider,System.ServiceModel.DomainServices.Server.DomainOperationType)">
            <summary>
            Initializes a new instance of the DomainServiceContext class
            </summary>
            <param name="serviceProvider">A service provider.</param>
            <param name="operationType">The type of operation that is being executed.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.#ctor(System.ServiceModel.DomainServices.Server.DomainServiceContext,System.ServiceModel.DomainServices.Server.DomainOperationType)">
            <summary>
            Copy constructor that creates a new context of the specified type copying
            the rest of the context from the provided instance.
            </summary>
            <param name="serviceContext">The service context to copy from.</param>
            <param name="operationType">The type of operation that is being executed.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.GetService(System.Type)">
            <summary>
            See <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            When the <see cref="P:System.ServiceModel.DomainServices.Server.DomainServiceContext.ServiceContainer"/> is in use, it will be used
            first to retrieve the requested service.  If the <see cref="P:System.ServiceModel.DomainServices.Server.DomainServiceContext.ServiceContainer"/>
            is not being used or it cannot resolve the service, then the
            <see cref="T:System.IServiceProvider"/> provided to this <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceContext"/>
            will be queried for the service type.
            </summary>
            <param name="serviceType">The type of the service needed.</param>
            <returns>An instance of that service or null if it is not available.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceContext.Operation">
            <summary>
            Gets the operation that is being executed.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceContext.OperationType">
            <summary>
            Gets the type of operation that is being executed.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceContext.User">
            <summary>
            The user for this context instance.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceContext.ServiceContainer">
            <summary>
            A <see cref="T:System.ComponentModel.Design.IServiceContainer"/> that can be used for adding,
            removing, and getting services during a domain service invocation. <see cref="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.GetService(System.Type)"/>
            will query into this container as well as the <see cref="T:System.IServiceProvider"/>
            specified in the constructor.
            </summary>
            <remarks>
            If the <see cref="T:System.IServiceProvider"/> specified to the constructor implements
            <see cref="T:System.ComponentModel.Design.IServiceContainer"/>, then it will be used as the
            <see cref="P:System.ServiceModel.DomainServices.Server.DomainServiceContext.ServiceContainer"/>, otherwise an empty container will be initialized.
            </remarks>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer">
            <summary>
            Private implementation of <see cref="T:System.ComponentModel.Design.IServiceContainer"/> to act
            as a default service container on <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceContext"/>.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.#ctor">
            <summary>
            Constructs a new service container that does not have a parent container
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.#ctor(System.ComponentModel.Design.IServiceContainer)">
            <summary>
            Constructs a new service container that has a parent container, making this container
            a wrapper around the parent container.  
            Calls to <see cref="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)"/> and <see cref="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.RemoveService(System.Type,System.Boolean)"/> 
            will promote to the parent container by default, unless the "promote" param of those methods is
            specified as <c>false</c> on those calls.
            </summary>
            <param name="parentContainer">The parent container to wrap into this container.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
            <param name="promote"><value>true</value> to promote this request to any parent service containers; otherwise, <value>false</value>. </param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="callback">A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType"/> parameter.</param>
            <param name="promote"><value>true</value> to promote this request to any parent service containers; otherwise, <value>false</value>. </param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.AddService(System.Type,System.Object)">
            <summary>
            Adds the specified service to the service container.
            </summary>
            <param name="serviceType">The type of service to add.</param>
            <param name="serviceInstance">An instance of the service type to add. This object must implement or inherit from the type indicated by the <paramref name="serviceType"/> parameter.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.RemoveService(System.Type,System.Boolean)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
            <param name="promote"><value>true</value> to promote this request to any parent service containers; otherwise, <value>false</value>. </param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.RemoveService(System.Type)">
            <summary>
            Removes the specified service type from the service container.
            </summary>
            <param name="serviceType">The type of service to remove.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceContext.DomainServiceContextServiceContainer.GetService(System.Type)">
            <summary>
            See <see cref="M:System.IServiceProvider.GetService(System.Type)"/>.
            </summary>
            <param name="serviceType">The type of the service needed.</param>
            <returns>An instance of that service or null if it is not available.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainService">
            <summary>
            Base class for all <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>s.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.#ctor">
            <summary>
            Protected constructor
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.IsAuthorized(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object)">
            <summary>
            Requests authorization for the given <paramref name="domainOperationEntry"/>.
            </summary>
            <param name="domainOperationEntry">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> to authorize.</param>
            <param name="entity">Optional entity instance to authorize.  
            A <c>null</c> is acceptable for queries or when determining whether an operation can be performed
            outside the context of a submit.  During a submit or invoke, however, if an entity instance
            is available, this value will not be <c>null</c>.
            </param>
            <returns>The results of authorization.  <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> indicates the
            authorization request is allowed.  Any other value indicates it was denied.
            </returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.Dispose">
            <summary>
            Dispose this <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.Initialize(System.ServiceModel.DomainServices.Server.DomainServiceContext)">
            <summary>
            Initializes this <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>. <see cref="M:System.ServiceModel.DomainServices.Server.DomainService.Initialize(System.ServiceModel.DomainServices.Server.DomainServiceContext)"/> must be called 
            prior to invoking any operations on the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance.
            </summary>
            <param name="context">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceContext"/> for this <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>
            instance. Overrides must call the base method.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.Query(System.ServiceModel.DomainServices.Server.QueryDescription,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}@,System.Int32@)">
            <summary>
            Performs the query operation indicated by the specified <see cref="T:System.ServiceModel.DomainServices.Server.QueryDescription"/>
            and returns the results. If the query returns a singleton, it should still be returned
            as an <see cref="T:System.Collections.IEnumerable"/> containing the single result.
            </summary>
            <param name="queryDescription">The description of the query to perform.</param>
            <param name="validationErrors">Output parameter that will contain any validation errors encountered. If no validation
            errors are encountered, this will be set to <c>null</c>.</param>
            <param name="totalCount">Returns the total number of results based on the specified query, but without 
            any paging applied to it.</param>
            <returns>The query results. May be null if there are no query results.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.Invoke(System.ServiceModel.DomainServices.Server.InvokeDescription,System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.ValidationResult}@)">
            <summary>
            Invokes the specified invoke operation.
            </summary>
            <param name="invokeDescription">The description of the invoke operation to perform.</param>
            <param name="validationErrors">An output parameter collection to which any validation errors 
            will be added. This will be set to <c>null</c> if no validation errors are encountered.</param>
            <returns>The return value of the invocation.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.Submit(System.ServiceModel.DomainServices.Server.ChangeSet)">
            <summary>
            Performs the operations indicated by the specified <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/> by invoking
            the corresponding domain operations for each.
            </summary>
            <param name="changeSet">The changeset to submit</param>
            <returns>True if the submit was successful, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.EvaluateAuthorization(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.AuthorizationAttribute},System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)">
            <summary>
            Helper method to invoke the <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.Authorize(System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)"/> method on a collection
            of <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationAttribute"/>s.
            </summary>
            <remarks>
            The <see cref="T:System.ServiceModel.DomainServices.Server.RequiresAuthenticationAttribute"/> will be evaluated first if present.
            </remarks>
            <param name="attributes">The collection of attributes to test.  It may be empty.</param>
            <param name="principal">The <see cref="T:System.Security.Principal.IPrincipal"/> to use.</param>
            <param name="authorizationContext">The <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.AuthorizationContext"/> to use.</param>
            <returns>The <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationResult"/>.  The value of <see cref="F:System.ComponentModel.DataAnnotations.AuthorizationResult.Allowed"/> 
            indicates it is allowed, any other non-null value indicates it was denied.
            </returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.ValidateOperations(System.Collections.Generic.IEnumerable{System.ServiceModel.DomainServices.Server.ChangeSetEntry},System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.ComponentModel.DataAnnotations.ValidationContext)">
            <summary>
            Performs object, method and property validation and sets any recoverable
            errors encountered on the given <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/> list.
            </summary>
            <param name="operations">The list of operations to validate.</param>
            <param name="domainServiceDescription">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> for the operation being validated.</param>
            <param name="validationContextRoot">An optional <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ValidationContext"/> to use for services and items, or <c>null</c>.</param>
            <returns><c>true</c> if all the operations in the specified list are valid.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.Count``1(System.Linq.IQueryable{``0})">
            <summary>
            Gets the result count for the specified <see cref="T:System.Linq.IQueryable`1"/>. <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>s should 
            override this method to implement support for total-counts of paged result-sets. Overrides shouldn't 
            call the base method.
            </summary>
            <typeparam name="T">The element <see cref="T:System.Type"/> of the query.</typeparam>
            <param name="query">The query for which the count should be returned.</param>
            <returns>The total result count if total-counts are supported; -1 otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.Dispose(System.Boolean)">
            <summary>
            Disposes this <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            </summary>
            <param name="disposing">True if we're currently disposing.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.AuthorizeChangeSet">
            <summary>
            Verifies the user is authorized to submit the current <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/>.
            </summary>
            <returns>True if the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/> is authorized, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.ValidateChangeSet">
            <summary>
            Validates the current <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/>. Any errors should be set on the individual <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/>s
            in the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/>.
            </summary>
            <returns><c>True</c> if all operations in the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/> passed validation, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.ExecuteChangeSet">
            <summary>
            This method invokes the <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> for each operation in the current <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/>.
            </summary>
            <returns>True if the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/> was processed successfully, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.OnError(System.ServiceModel.DomainServices.Server.DomainServiceErrorInfo)">
            <summary>
            This method is called whenever an unrecoverable error occurs during
            the processing of a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> operation.
            Override this method to perform exception logging, or to inspect or transform
            server errors before results are sent back to the client.
            </summary>
            <param name="errorInfo">Information on the error that occurred.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.PersistChangeSet">
            <summary>
            This method is called to finalize changes after all the operations in the current <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/>
            have been invoked. This method should commit the changes as necessary to the data store.
            Any errors should be set on the individual <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/>s in the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/>.
            </summary>
            <returns>True if the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/> was persisted successfully, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.ResolveOperations">
            <summary>
            For all operations in the current changeset, validate that the operation exists, and
            set the operation entry.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.CheckOperationType(System.ServiceModel.DomainServices.Server.DomainOperationType)">
            <summary>
            Verifies that the service has been initialized for the specified
            operation type, and throws an exception if now.
            </summary>
            <param name="operationType">The current operation type.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.GetTotalCountForQuery(System.ServiceModel.DomainServices.Server.QueryDescription,System.Linq.IQueryable,System.Boolean)">
            <summary>
            Gets the total count for a query.
            </summary>
            <param name="queryDescription">The query description.</param>
            <param name="queryable">The query.</param>
            <param name="skipPagingCheck"><c>true</c> if the paging check can be skipped; <c>false</c> otherwise.</param>
            <returns>The total count.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.ConvertMethodParameters(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object[])">
            <summary>
            Process parameter values and attempt to convert them to the types 
            defined by the method signature. On successful completion, the
            <paramref name="parameterValues"/> collection will contain the 
            the converted values.
            </summary>
            <param name="method"><see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> that defines the 
            expected parameter types.</param>
            <param name="parameterValues">The raw parameter values.</param>
            <exception cref="T:System.InvalidOperationException">is thrown if the number 
            of parameter values provided does not match the number of method 
            parameter arguments.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.GetCustomMethodParams(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Returns the properly converted and configured parameter array for the specified object and
            parameter values. This is formed by using the <paramref name="entity"/> as the first argument,
            then adding the rest of the invocation parameters from the client.
            </summary>
            <remarks>
            The <paramref name="entity"/> passed to the method will either be the original client modified entity as
            contained in the operation or a new associated entity if a user called the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/> Replace
            method prior to invoking this operation.
            </remarks>
            <param name="customMethodEntry">The custom method operation entry.</param>
            <param name="entity">The object the custom method is invoked on.</param>
            <param name="parameters">The raw custom method parameters.</param>
            <returns>Returns an array of custom method call parameters.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.PersistChangeSetInternal">
            <summary>
            This method invokes the user overridable <see cref="M:System.ServiceModel.DomainServices.Server.DomainService.PersistChangeSet"/> method wrapping the call
            with the appropriate exception handling logic. All framework calls to <see cref="M:System.ServiceModel.DomainServices.Server.DomainService.PersistChangeSet"/>
            must go through this method. Some data sources have their own validation hook points,
            so if a <see cref="T:System.ComponentModel.DataAnnotations.ValidationException"/> is thrown at that level, we want to capture it.
            </summary>
            <returns>True if the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/> was persisted successfully, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.EnsureInitialized">
            <summary>
            Ensures the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> has been initialized properly.
            </summary>
            <exception cref="T:System.InvalidOperationException">if this service instance hasn't been initialized.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.ValidateMethodPermissions(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object)">
            <summary>
            Validate the permissions for the specified <paramref name="domainOperationEntry"/>. If the authorization check
            fails, an <see cref="T:System.UnauthorizedAccessException"/> will be thrown.
            </summary>
            <param name="domainOperationEntry">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> to validate.</param>
            <param name="entity">The optional entity instance being authorized.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.InvokeCudOperations">
            <summary>
            Invokes all CUD operations in the current <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/>.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.InvokeCustomOperations">
            <summary>
            Invokes all Custom operations in the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/>.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.InvokeDomainOperationEntry(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object[],System.ServiceModel.DomainServices.Server.ChangeSetEntry)">
            <summary>
            Invokes the given <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>. If a non-recoverable exception
            is encountered during the invocation, the exception is
            re-thrown. Otherwise, the error is appended to the operation's
            errors list.
            </summary>
            <param name="domainOperationEntry">The domain operation entry to invoke.</param>
            <param name="parameters">The parameters to invoke domain operation entry with.</param>
            <param name="operation">The <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/> object associated with the domain operation entry for logging errors (if any).</param>
            <returns>The result of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.ValidateMethodCall(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object[],System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Validates a method call.
            </summary>
            <param name="domainOperationEntry">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> to validate.</param>
            <param name="parameters">The parameters to pass to the method.</param>
            <param name="validationResults">The collection to which we can append validation results.</param>
            <returns><c>true</c> if the parameters are valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.TryValidateOperation(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.ComponentModel.DataAnnotations.ValidationContext,System.Object[],System.Collections.Generic.List{System.ComponentModel.DataAnnotations.ValidationResult})">
            <summary>
            Validates the specified method, returning any validation errors
            </summary>
            <param name="operation">The operation to validate.</param>
            <param name="validationContext">The validation context.</param>
            <param name="parameters">The parameter values.</param>
            <param name="validationResults">Collection of ValidationResults to accumulate into.</param>
            <returns><c>True</c> if the method is valid, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.Enumerate``1(System.Collections.IEnumerable,System.Int32)">
            <summary>
            Enumerates the specified enumerable to guarantee eager execution. This method is similar to 
            Enumerable.ToArray, except it contains a few additional optimizations, such as using 
            bigger arrays to reduce the number of resizes required for most scenarios.
            </summary>
            <typeparam name="T">The element type of the enumerable.</typeparam>
            <param name="enumerable">The enumerable to enumerate.</param>
            <param name="estimatedResultCount">The estimated number of items the enumerable will yield.</param>
            <returns>A new enumerable with the results of the enumerated enumerable.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainService.Factory">
            <summary>
            Gets or sets the <see cref="T:System.ServiceModel.DomainServices.Server.IDomainServiceFactory"/> used to create new <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instances.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainService.ServiceDescription">
            <summary>
            Gets the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> for this <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainService.ServiceContext">
            <summary>
            Gets the active <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceContext"/> for this <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainService.ValidationContext">
            <summary>
            Gets or sets the optional <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ValidationContext"/> to use
            for all validation operations invoked by the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            </summary>
            <value>
            This value may be set by the developer at any time to be used as the backing
            <see cref="T:System.IServiceProvider"/> and source of
            <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items"/>,
            making these services and items available to each
            <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute"/> involved in validation.
            </value>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainService.AuthorizationContext">
            <summary>
            Gets or sets the optional template <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.AuthorizationContext"/> to use
            for <see cref="M:System.ServiceModel.DomainServices.Server.DomainService.IsAuthorized(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object)"/>.
            </summary>
            <value>
            This value may be set by the developer at any time to serve as the template
            for authorization of each <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.  
            The <see cref="M:System.ServiceModel.DomainServices.Server.DomainService.Initialize(System.ServiceModel.DomainServices.Server.DomainServiceContext)"/> method is the preferred
            place to set this value.  The recommended construction pattern is to
            specify <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ServiceContext"/> as the template's <see cref="T:System.IServiceProvider"/>.
            <para>
            If this value is not set by the user, a default one will be
            created following that pattern.
            </para>
            <para>
            This property is intended to allow a developer to provide additional state information
            or services in the <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.AuthorizationContext"/> that can be used by the
            <see cref="M:System.ComponentModel.DataAnnotations.AuthorizationAttribute.IsAuthorized(System.Security.Principal.IPrincipal,System.ComponentModel.DataAnnotations.AuthorizationContext)"/> implementation logic for all
            <see cref="T:System.ComponentModel.DataAnnotations.AuthorizationAttribute"/> subclasses.
            </para>
            <para>
            This optional template value is not passed directly to <see cref="M:System.ServiceModel.DomainServices.Server.DomainService.IsAuthorized(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object)"/>
            but instead is used as the source from which to clone the actual <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.AuthorizationContext"/>.
            The template will be used as the parent <see cref="T:System.IServiceProvider"/>.
            </para>
            <para>Because <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.AuthorizationContext"/> implements <see cref="T:System.IDisposable"/>, the
            value set in this property must be disposed explicitly by the developer.
            </para>
            </value>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet">
            <summary>
            Gets the current <see cref="P:System.ServiceModel.DomainServices.Server.DomainService.ChangeSet"/>. Returns null if no change operations are being performed.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainService.DefaultDomainServiceFactory">
            <summary>
            Default <see cref="T:System.ServiceModel.DomainServices.Server.IDomainServiceFactory"/> implementation.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.IDomainServiceFactory">
            <summary>
            Provides an interface for <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> factory implementations.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.IDomainServiceFactory.CreateDomainService(System.Type,System.ServiceModel.DomainServices.Server.DomainServiceContext)">
            <summary>
            Creates a new <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance.
            </summary>
            <param name="domainServiceType">The <see cref="T:System.Type"/> of <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> to create.</param>
            <param name="context">The current <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceContext"/>.</param>
            <returns>A <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.IDomainServiceFactory.ReleaseDomainService(System.ServiceModel.DomainServices.Server.DomainService)">
            <summary>
            Releases an existing <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance.
            </summary>
            <param name="domainService">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance to release.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.DefaultDomainServiceFactory.CreateDomainService(System.Type,System.ServiceModel.DomainServices.Server.DomainServiceContext)">
            <summary>
            Creates a new <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance.
            </summary>
            <param name="domainServiceType">The <see cref="T:System.Type"/> of <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> to create.</param>
            <param name="context">The current <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceContext"/>.</param>
            <returns>A <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainService.DefaultDomainServiceFactory.ReleaseDomainService(System.ServiceModel.DomainServices.Server.DomainService)">
            <summary>
            Releases an existing <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance.
            </summary>
            <param name="domainService">A <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> instance to release.</param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription">
            <summary>
            This class provides a metadata description of a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> and the
            types and operations it exposes.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.#ctor(System.Type)">
            <summary>
            Constructs a description for the specified <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> Type.
            </summary>
            <param name="domainServiceType">The Type of the DomainService</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.#ctor(System.ServiceModel.DomainServices.Server.DomainServiceDescription)">
            <summary>
            Constructs a description based on the specified <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/>.
            </summary>
            <param name="baseDescription">The base <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/></param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.AddOperation(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Add the specified operation to this description.
            </summary>
            <remarks>
            This method can only be called during construction of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> before
            it has been completely initialized. This is done in advanced extensibility scenarios involving custom
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider"/>s.
            </remarks>
            <param name="operation">The operation to add.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetQueryMethod(System.String)">
            <summary>
            Returns the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> query method of the specified name
            </summary>
            <param name="queryName">The name of the query </param>
            <returns>DomainOperationEntry for the specified query name</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetInvokeOperation(System.String)">
            <summary>
            Returns the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> invoke operation of the specified name.
            </summary>
            <param name="operationName">The name of the operation</param>
            <returns><see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> for the specified operation name.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetCustomMethod(System.Type,System.String)">
            <summary>
            Returns the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> custom method of the specified name associated with the specified entity type
            </summary>
            <param name="entityType">The entity type the custom method is associated with</param>
            <param name="methodName">The name of the custom method</param>
            <returns><see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> for the custom method if found, null otherwise</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetCustomMethods(System.Type)">
            <summary>
            Returns the collection of custom methods defined for the given entity type
            </summary>
            <param name="entityType">The entity type associated with the custom methods</param>
            <returns>The collection of custom methods defined for the given entity type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetSubmitMethod(System.Type,System.ServiceModel.DomainServices.Server.DomainOperation)">
            <summary>
            Gets the submit method for the specified entity type and <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperation"/>
            </summary>
            <param name="entityType">The entity type</param>
            <param name="operation">The <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperation"/> type to get the method for. Must be
            an Insert, Update or Delete operation.</param>
            <returns>The method if it exists, otherwise null</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetParentAssociations(System.Type)">
            <summary>
            If the specified Type is the child of a compositional relationship
            this method returns all the compositional associations that compose the
            Type.
            </summary>
            <param name="entityType">The Type to get parent associations for.</param>
            <returns>Collection of <see cref="T:System.ComponentModel.PropertyDescriptor"/>s for each parent association. May be empty.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetSerializationType(System.Type)">
            <summary>
            For the specified type, this method returns the corresponding
            Type exposed by the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>, taking inheritance into account.
            </summary>
            <remarks>Any serialization operations operating on Types should
            call into this method to get the correct Type definition to operate on.</remarks>
            <param name="type">The Type of the object.</param>
            <returns>The corresponding type exposed by the DomainService, or null
            if the specified type is not exposed by the DomainService.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetRootEntityType(System.Type)">
            <summary>
            Returns the root type for the given entity type.
            </summary>
            <remarks>
            The root type is the least derived entity type in the entity type
            hierarchy that is exposed through a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            </remarks>
            <param name="entityType">The entity type whose root is required.</param>
            <returns>The type of the root or <c>null</c> if the given <paramref name="entityType"/>
            has no base types.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetEntityBaseType(System.Type)">
            <summary>
            Gets the base type of the given entity type.
            </summary>
            <remarks>
            The base type is the closest base type of
            the given entity type that is exposed by the
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>. The entity hierarchy
            may contain types that are not exposed, and this
            method skips those.
            </remarks>
            <param name="entityType">The entity type whose base type is required.</param>
            <returns>The base type or <c>null</c> if the given
            <paramref name="entityType"/> had no visible base types.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetDescription(System.Type)">
            <summary>
            Returns the <see cref="T:System.ServiceModel.DomainServices.Server.DomainServiceDescription"/> for the specified <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> Type.
            </summary>
            <param name="domainServiceType">The Type of <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> to get description for</param>
            <returns>The description for the specified <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.Initialize">
            <summary>
            Validate and initialize the description. Initialize should be called before the description
            is used. Only descriptions that have been created manually need to be initialized. Descriptions
            returned by the framework are already initialized.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.DiscoverComplexTypes">
            <summary>
            Enumerates all entity types and operations searching for complex types and
            adds them to our complex types collection.
            <remarks>
            Nowhere on this codepath can MetaTypes be accessed for complex types, since we
            require ALL complex types to have their TDPs registered before hand.
            </remarks>
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.IsKnownEntityType(System.Type)">
            <summary>
            Checks whether the specified type is a known entity type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if the type is a known entity type; false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.IsComposedEntityType(System.Type)">
            <summary>
            Checks whether the specified type is a composed entity type.
            </summary>
            <param name="type">The type to check.</param>
            <returns>true if the type is a composed entity type; false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.CheckInvalidUpdate">
            <summary>
            Verifies that the description is still in an uninitialized state. A description
            can only be modified/configured before it has been initialized.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.EnsureInitialized">
            <summary>
            Call this method to ensure that the description is initialized.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.CreateDescription(System.Type)">
            <summary>
            Create the base reflection based description, then call all DomainDescriptionProviders in the inheritance
            hierarchy, chaining them, and allowing each of them to replace or modify the description as needed.
            </summary>
            <param name="domainServiceType">The DomainService Type.</param>
            <returns>The description</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.CreateDescriptionProvider(System.Type)">
            <summary>
            Creates and returns the description provider for the specified domain service Type.
            </summary>
            <param name="domainServiceType">The domain service Type.</param>
            <returns>The description provider.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.RegisterCustomTypeDescriptors(System.Type)">
            <summary>
            Register all required custom type descriptors for the specified type.
            </summary>
            <param name="type">The type to register.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.RegisterDomainTypeDescriptionProvider(System.Type,System.ServiceModel.DomainServices.Server.DomainServiceDescriptionProvider)">
            <summary>
            Register our DomainTypeDescriptionProvider for the specfied Type. This provider is responsible for surfacing the
            custom TDs returned by description providers.
            </summary>
            <param name="type">The Type that we should register for.</param>
            <param name="descriptionProvider">The description provider.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.IsValidEntityType(System.Type,System.String@)">
            <summary>
            Determines whether a given type may be used as an entity type.
            </summary>
            <param name="type">The type to test</param>
            <param name="errorMessage">If this method returns <c>false</c>, the error message</param>
            <returns><c>true</c> if the type can legally be used as an entity</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetQueryEntityReturnType(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Boolean@,System.Exception@)">
            <summary>
            Gets the entity type returned by the specified query method and determines
            whether this query method returns a singleton.
            </summary>
            <param name="method">The query method</param>
            <param name="isSingleton">The output parameter to accept whether this query returns a singleton.</param>
            <param name="error">The output parameter to accept the error if the entity return type is illegal.</param>
            <returns>The entity type</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.AddComplexType(System.Type)">
            <summary>
            Adds the specified complex Type, including any referenced complex types
            recursively.
            </summary>
            <param name="complexType">The complex type to add</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidateComplexTypes">
            <summary>
            Validate all complex types
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidateComplexType(System.Type)">
            <summary>
            Perform validation on the complex type
            </summary>
            <param name="complexType">The complex type to validate</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.AddEntityType(System.Type)">
            <summary>
            Recursively add the specified entity and all entities in its Include graph
            to our list of all entities, and register an associated metadata type descriptor
            for each.
            </summary>
            <param name="entityType">type of entity to add</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidatePropertyPolymorphism(System.Type)">
            <summary>
            Validates that the given <paramref name="entityType"/> does not contain
            any properties that violate our rules for polymorphism.
            </summary>
            <remarks>
            The only rule currently enforced is that no property can use "new" to
            override an existing entity property.
            </remarks>
            <param name="entityType">The entity type to validate.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidateEntityTypes">
            <summary>
            Validate all entity types exposed by this provider.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.FixupCompositionMap">
            <summary>
            Fixes the map of composed types so that derived composition types
            inherit the parent associations from their base type.
            </summary>
            <remarks>
            This method assumes the composition map has been constructed
            to contain the parent associations for each composed type without
            regard to inheritance.  Hence, composition subclasses will not have
            entries in the map unless they have additional parent associations.
            Composition subclasses that have no entry will gain a new entry
            that is the accumulation of all their base class's associations.
            Composition subclasses that have their own parent associations will
            combine those with the accumulated base class's associations.
            </remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.FixParentAssociationsWalk(System.Type,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Helper method to ensure this <paramref name="entityType"/>'s entry in
            the composition map combines its explicit parent associations together
            with those from all its base type's associations.
            </summary>
            <remarks>
            This algorithm repairs the composition map in-place and reentrantly
            fixes the entity's base class entries first.  The map will not be replaced,
            but will be updated in-place.  Existing lists in the map will be extended
            but not replaced.  Holes in the map will be filled in by sharing the base
            class's entry rather than cloning.
            </remarks>
            <param name="entityType">The entity type to repair.  It may or may not be a composed type.</param>
            <param name="fixedEntities">Hash of already repaired entity types.  Used to avoid duplicate fixups.</param>
            <returns>The collection of parent associations.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidateKnownTypeAttribute(System.Type,System.Boolean)">
            <summary>
            Validates that the specified root entity type
            has a <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/> for each of its
            derived types.
            </summary>
            <param name="entityType">The entity type to check.</param>
            <param name="mustSpecifyAll">If <c>true</c> this method validates that this entity declares all its derived types via <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/>.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidateDataContractAttribute(System.Type)">
            <summary>
            Validates that if the specified type derives from a type with 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/>, then it has a 
            <see cref="T:System.Runtime.Serialization.DataContractAttribute"/> as well.
            </summary>
            <param name="entityType">The entity type to check.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidateComposedTypeOperations(System.Type)">
            <summary>
            Ensures that for composed Types, if they have explicit update operations the
            correct corresponding operations are supported on all parent Types.
            </summary>
            <param name="entityType">The entity type to validate</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidateEntityAssociations(System.Type,System.ComponentModel.PropertyDescriptorCollection)">
            <summary>
            This method validates the association attributes for the specified entity type
            </summary>
            <param name="entityType">Type of entity to validate its association attributes for</param>
            <param name="entityProperties">collection of entity property descriptors</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.AddQueryMethod(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Add a Query method to this domain service.
            </summary>
            <param name="method"><see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> for the method to be added</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.AddSubmitMethod(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Add a CUD method to this domain service.
            </summary>
            <param name="method"><see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> for the method to be added</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidateDefaultQuery(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Validates that the specified query method can legally be marked as the default
            </summary>
            <param name="method">The query method</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.IsByVal(System.ServiceModel.DomainServices.Server.DomainOperationParameter)">
            <summary>
            Checks whether a parameter expects a value to be passed by-value.
            </summary>
            <param name="parameter">The parameter to check.</param>
            <returns>True if the parameter expects a by-value value.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.AddCustomMethod(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Add a Custom method to this domain service. The first param is assumed to be the entity,
            all other params should be one of the predefined types
            </summary>
            <param name="method">the custom method to be added</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.AddInvokeOperation(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Add an invoke operation to this domain service. All params have to be either of one of the
            predefined types, or of an entity type defined on the provider.
            </summary>
            <param name="method">the invoke operationto be added</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ValidateDerivedDomainOperations">
            <summary>
            Validates that every CUD method (aka domain operation) exposed on a derived
            entity is also exposed on that entity's root.
            </summary>
            <exception cref="T:System.InvalidOperationException">if any derived entity exposes a domain operation not also on the root.</exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.IsOperationSupported(System.Type,System.ServiceModel.DomainServices.Server.DomainOperation)">
            <summary>
            Determines whether the specified change operation is supported for the specified Type.
            If the Type is the child of one or more composition relationships, operation support
            takes parent support into account.
            </summary>
            <param name="entityType">The entity Type to check.</param>
            <param name="operationType">The operation Type to check. Must be one of the
            change operation types Insert, Update or Delete.</param>
            <returns><c>True</c> if the operation is supported, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.IsOperationSupportedInternal(System.Type,System.ServiceModel.DomainServices.Server.DomainOperation,System.Boolean,System.Collections.Generic.HashSet{System.Type})">
            <summary>
            Recursive helper for <see cref="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.IsOperationSupported(System.Type,System.ServiceModel.DomainServices.Server.DomainOperation)"/>. This method checks support
            for the type directly, then checks composing parents as well.
            </summary>
            <param name="entityType">The entity Type to check.</param>
            <param name="operationType">The operation Type to check.</param>
            <param name="isParent">True if the check should use compositional parent rules.</param>
            <param name="visited">Visited map used during recursion.</param>
            <returns><c>True</c> if the operation is supported, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ComputeEntityKnownTypes">
            <summary>
            Computes the closure of known types for all the known entities.
            See <see cref="P:System.ServiceModel.DomainServices.Server.DomainServiceDescription.EntityKnownTypes"/>
            </summary>
            <returns>A dictionary, keyed by entity type and containing all the
            declared known types for it, including the transitive closure.
            </returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.DomainServiceDescription.GetEntityDerivedTypes(System.Type)">
            <summary>
            Returns the collection of all entity types derived from <paramref name="entityType"/>
            </summary>
            <param name="entityType">The entity type whose derived types are needed.</param>
            <returns>The collection of derived types.  It may be empty.</returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescription.EntityKnownTypes">
            <summary>
            Gets the cache associating entity types with the types
            identified with <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/>
            </summary>
            <value>
            The result is a dictionary, keyed by entity type and containing
            the set of other entity types that were declared via a
            <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/>.  This set contains only entity
            types -- extraneous other known types are omitted.  This set also
            contains the full closure of known types for every entity type
            by rolling up derived type's known types onto their base.
            This cache is lazily loaded but stable.  This means that we capture
            the list of known types once and are not affected by the semantics
            of <see cref="T:System.Runtime.Serialization.KnownTypeAttribute"/> that permit a runtime method
            to return potentially different known types.
            </value>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescription.ComplexTypes">
            <summary>
            Gets the complex types exposed by the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescription.DomainServiceType">
            <summary>
            Gets the Type of the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescription.EntityTypes">
            <summary>
            Gets the entity types exposed by the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescription.RootEntityTypes">
            <summary>
            Gets all the root entity types exposed by the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>
            </summary>
            <remarks>A 'root entity type' is the least derived entity type within an
            entity hierarchy exposed by a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.  It need not be the
            actual base type of the hierarchy.
            </remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescription.DomainOperationEntries">
            <summary>
            Gets the collection of <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> items for the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.DomainServiceDescription.Attributes">
            <summary>
            Gets or sets a collection of attributes for <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> Type.
            </summary>
            <remarks>This includes attributes decorated on the Type directly as well as attributes surfaced 
            from implemented interfaces.</remarks>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry">
            <summary>
            Represents a domain operation to be performed on an entity. This is the message
            type passed between DomainClient and <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> both for sending operations to
            the <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> as well as for returning operation results back to the DomainClient.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSetEntry.#ctor">
            <summary>
            Constructs an instance of <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/>
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ChangeSetEntry.#ctor(System.Int32,System.Object,System.Object,System.ServiceModel.DomainServices.Server.DomainOperation)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/> class
            </summary>
            <param name="id">The client Id for the entity.</param>
            <param name="entity">The entity.</param>
            <param name="originalEntity">The original entity. May be null.</param>
            <param name="operation">The operation to be performed</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.HasError">
            <summary>
            Gets a value indicating whether any errors were encountered 
            during processing of the operation.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.HasConflict">
            <summary>
            Gets a value indicating whether the <see cref="T:System.ServiceModel.DomainServices.Server.ChangeSetEntry"/> contains conflicts.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.Entity">
            <summary>
            Gets or sets the <see cref="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.Entity"/> being operated on
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.Id">
            <summary>
            Gets or sets the client ID for the entity
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.HasMemberChanges">
            <summary>
            Gets or sets a value indicating whether the entity for
            this operation has property modifications.
            <remarks>Note that even if OriginalEntity hasn't been
            set, in the case of entities using a timestamp member
            for concurrency, the entity may still be modified. This
            flag allows us to distinguish that case from an Update
            operation that represents a custom method invocation only.
            </remarks>
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.Operation">
            <summary>
            Gets or sets the <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperation"/> to be performed on the entity.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.EntityActions">
            <summary>
            Gets or sets the custom methods invoked on the entity, as a set
            of method name / parameter set pairs.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.OriginalEntity">
            <summary>
            Gets or sets the original state of the entity being operated on
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.StoreEntity">
            <summary>
            Gets or sets the state of the entity in the data store
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.ValidationErrors">
            <summary>
            Gets or sets the validation errors encountered during the processing of the operation. 
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.ConflictMembers">
            <summary>
            Gets or sets the collection of members in conflict. The <see cref="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.StoreEntity"/> property
            contains the current store value for each property.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.IsDeleteConflict">
            <summary>
            Gets or sets whether the conflict is a delete conflict, meaning the
            entity no longer exists in the store.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.Associations">
            <summary>
            Gets or sets the collection of IDs of the associated entities for
            each association of the Entity
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.OriginalAssociations">
            <summary>
            Gets or sets the collection of IDs for each association of the <see cref="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.OriginalEntity"/>
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.DomainOperationEntry">
            <summary>
            Gets or sets the <see cref="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.DomainOperationEntry"/> for the operation. May be
            null if the operation is for a composed Type that doesn't have an explicit
            operation defined.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ChangeSetEntry.ParentOperation">
            <summary>
            Gets or sets the parent operation for composed operations.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ExcludeAttribute">
            <summary>
            Indicates that an entity member should not exist in the code generated 
            client view of the entity, and that the value should never be sent to
            the client.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.IncludeAttribute">
            <summary>
            Attribute applied to an association member to indicate that the associated entities should be
            made available for client access.
            </summary>
            <remarks>
            When applied to an entity association, this attribute indicates that the association should be
            part of any code generated client entities, and that any related entities should be included when
            serializing results to the client. Note that it is up to the query method to make sure the associated
            entities are actually loaded. This attribute can also be used to specify member projections.
            </remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.IncludeAttribute.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.IncludeAttribute.#ctor(System.String,System.String)">
            <summary>
            Constructor used to specify a member projection.
            </summary>
            <param name="path">Dotted path specifying the navigation path from the member this attribute
            is applied to, to the member to be projected. The projected member must be a scalar.</param>
            <param name="memberName">The member name for the projected member.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.IncludeAttribute.IsAttributeValid(System.String@)">
            <summary>
            Determines whether the current attribute instance is properly formed
            </summary>
            <param name="errorMessage">Error message returned to describe the problem</param>
            <returns><c>true</c> means it's valid</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.IncludeAttribute.ThrowIfAttributeNotValid">
            <summary>
            Throws InvalidOperationException is anything is wrong with the attribute
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.IncludeAttribute.IsProjection">
            <summary>
            Gets a value indicating whether this attribute specifies a member projection
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the current attribute is invalid.</exception>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.IncludeAttribute.Path">
            <summary>
            Gets the member projection path
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.IncludeAttribute.MemberName">
            <summary>
            Gets the name of the destination member for the projection 
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.IncludeAttribute.TypeId">
            <summary>
            Gets a unique identifier for this attribute.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.QueryDescription">
            <summary>
            Represents a query operation to be processed by a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/>
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.QueryDescription.#ctor(System.ServiceModel.DomainServices.Server.DomainOperationEntry)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Server.QueryDescription"/> class with the specified
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>.
            </summary>
            <param name="domainOperationEntry">The query operation to be processed</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.QueryDescription.#ctor(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Server.QueryDescription"/> class with the specified
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/> and parameter values.
            </summary>
            <param name="domainOperationEntry">The query operation to be processed</param>
            <param name="parameterValues">Parameter values for the method if it requires any</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.QueryDescription.#ctor(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Object[],System.Boolean,System.Linq.IQueryable)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Server.QueryDescription"/> class with the specified
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainOperationEntry"/>, parameter values, flag indicating whether
            to evaluate and include total entity count in the result and (optional) query to compose over
            the results.
            </summary>
            <param name="domainOperationEntry">The query operation to be processed</param>
            <param name="parameterValues">Parameter values for the method if it requires any</param>
            <param name="includeTotalCount">Flag to indicate that total entity count is required</param>
            <param name="query">The query to compose over the results</param>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.QueryDescription.Method">
            <summary>
            Gets the query operation to be processed
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.QueryDescription.ParameterValues">
            <summary>
            Gets the parameter values for the method if it requires any
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.QueryDescription.Query">
            <summary>
            Gets The query to compose over the results
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.QueryDescription.IncludeTotalCount">
            <summary>
            Gets a value indicating whether the total entity count needs to be automatically evaluated and included in the result.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.Resource">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Association_Not_Entity_Type">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; of entity type &apos;{1}&apos; cannot be marked with AssociationAttribute because &apos;{2}&apos; is not a valid entity type..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.AuthorizationAttribute_Default_Message">
            <summary>
              Looks up a localized string similar to Access to operation &apos;{0}&apos; was denied..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.AuthorizationAttribute_Requires_ErrorMessage">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; AuthorizationAttribute must specify a non-empty &apos;ErrorMessage&apos; to access &apos;{1}&apos; resource type..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.AuthorizationAttribute_Requires_Valid_Property">
            <summary>
              Looks up a localized string similar to The resource type &apos;{0}&apos; does not expose a static string property named &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.AuthorizationContext_Template_Only">
            <summary>
              Looks up a localized string similar to This AuthorizationContext instance is only a template and cannot be used directly.&quot;.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ChangeSet_ChangeSetEntryNotFound">
            <summary>
              Looks up a localized string similar to The specified entity does not exist in the ChangeSet..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ChangeSet_ChildHasMultipleParents">
            <summary>
              Looks up a localized string similar to Invalid ChangeSet : Entity for operation &apos;{0}&apos; has multiple parents..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ChangeSet_InvalidMemberExpression">
            <summary>
              Looks up a localized string similar to The member expression specified is invalid..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ChangeSet_OriginalNotValidForInsert">
            <summary>
              Looks up a localized string similar to GetOriginal cannot be called for a new entity being inserted..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ChangeSet_Replace_EntityTypesNotSame">
            <summary>
              Looks up a localized string similar to Cannot replace entity of type &apos;{0}&apos; with entity of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Composition_ParentsMustSupportDelete">
            <summary>
              Looks up a localized string similar to Composed type &apos;{0}&apos; can only have a Delete method if all of its parent types also support Update or Delete..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Composition_ParentsMustSupportInsert">
            <summary>
              Looks up a localized string similar to Composed type &apos;{0}&apos; can only have an Insert method if all of its parent types also support Update or Insert..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Composition_ParentsMustSupportUpdate">
            <summary>
              Looks up a localized string similar to Composed type &apos;{0}&apos; can only have an Update method if all of its parent types also support Update..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.CyclicMetadataTypeAttributesFound">
            <summary>
              Looks up a localized string similar to The MetadataTypeAttribute on type &apos;{0}&apos; results in a cyclic metadata provider chain. Either remove the attribute or remove the cycle..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DerivedEntityCannotHaveKey">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; of type &apos;{1}&apos; is marked with the KeyAttribute.  Derived entity classes cannot declare key properties..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainOperation_Required_On_Root">
            <summary>
              Looks up a localized string similar to The domain operation &apos;{0}&apos; declared on the entity &apos;{1}&apos; must also be declared on the root entity &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainOperationEntry_ArgumentCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to The argument &apos;{0}&apos; cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainOperationEntryOverload_NotSupported">
            <summary>
              Looks up a localized string similar to A method named &apos;{0}&apos; is already defined. DomainOperationEntry overloads are not supported..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainService_AlreadyInitialized">
            <summary>
              Looks up a localized string similar to This DomainService has already been initialized..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainService_DuplicateCUDMethod">
            <summary>
              Looks up a localized string similar to The domain operation entry named &apos;{0}&apos; provides redundant functionality. Another method named &apos;{1}&apos; already exists..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainService_Factory_InvalidDomainServiceType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not a valid DomainService type..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainService_InvalidDomainOperationEntry">
            <summary>
              Looks up a localized string similar to This DomainService does not support operation &apos;{0}&apos; for entity &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainService_InvalidOperationType">
            <summary>
              Looks up a localized string similar to This DomainService has been initialized for an operation of type &apos;{0}&apos; so it cannot be used for an operation of type &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainService_InvalidType">
            <summary>
              Looks up a localized string similar to The type &apos;{0}&apos; is not a valid DomainService type. DomainService types cannot be abstract or generic..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainService_NotInitialized">
            <summary>
              Looks up a localized string similar to This DomainService has not been initialized..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceContextServiceContainer_ItemAlreadyExists">
            <summary>
              Looks up a localized string similar to A service of type &apos;{0}&apos; already exists in the container..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_DataContractAttributeRequired">
            <summary>
              Looks up a localized string similar to The entity type &apos;{0}&apos; must be marked with DataContractAttribute since it derives from type &apos;{1}&apos; which is marked with DataContractAttribute..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_DefaultQuery_Cannot_Be_Singleton">
            <summary>
              Looks up a localized string similar to Query operation &apos;{0}&apos; cannot be marked as the default because it returns only a single value..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_DefaultQuery_Cannot_Have_Multiple">
            <summary>
              Looks up a localized string similar to Both query operations &apos;{0}&apos; and &apos;{1}&apos; cannot be marked as the default query operation because they return the same entity type &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_DefaultQuery_Cannot_Have_Multiple_Inheritance">
            <summary>
              Looks up a localized string similar to Both query operations &apos;{0}&apos; and &apos;{1}&apos; cannot be marked as the default query operation. Entity type &apos;{2}&apos; derives from entity type &apos;{3}&apos;.  The default query can expose only a single type for an entity hierarchy..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_DefaultQuery_Cannot_Have_Params">
            <summary>
              Looks up a localized string similar to Query operation &apos;{0}&apos; cannot be marked as the default because it declares parameters..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_IncompatibleOperationParentType">
            <summary>
              Looks up a localized string similar to The operation &apos;{0}&apos; cannot be added to this DomainServiceDescription for type &apos;{1}&apos; because the operation&apos;s DomainServiceType is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_InvalidCompositionMember">
            <summary>
              Looks up a localized string similar to CompositionAttribute cannot be applied to member &apos;{0}.{1}&apos;. CompositionAttribute can only be applied to members marked with AssociationAttribute..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_InvalidUpdate">
            <summary>
              Looks up a localized string similar to Modifications cannot be made to a DomainServiceDescription once it has been initialized..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_MultipleVersionMembers">
            <summary>
              Looks up a localized string similar to Entity type &apos;{0}&apos; has more than one member marked with both TimestampAttribute and ConcurrencyCheckAttribute. An entity can have only one concurrency version member..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_SingletonQueryMethodCannotCompose">
            <summary>
              Looks up a localized string similar to Query operation &apos;{0}&apos; cannot be marked composable since its return type &apos;{1}&apos; does not implement IEnumerable of T..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescription_Uninitialized">
            <summary>
              Looks up a localized string similar to This DomainServiceDescription hasn&apos;t been initialized. Initialize must be called before the description can be used..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.DomainServiceDescriptionProviderAttribute_MissingConstructor">
            <summary>
              Looks up a localized string similar to DomainServiceDescriptionProvider type &apos;{0}&apos; must have a constructor with two parameters of types &apos;Type&apos; and &apos;DomainServiceDescriptionProvider&apos;, in that order..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Entity_Has_No_Key_Properties">
            <summary>
              Looks up a localized string similar to The Entity &apos;{0}&apos; in DomainService &apos;{1}&apos; does not have a key defined. Entity types exposed by DomainService operations must have at least one public property marked with the KeyAttribute..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Entity_Property_Redefined">
            <summary>
              Looks up a localized string similar to Property &apos;{0}.{1}&apos; is already defined by &apos;{2} and cannot be redefined..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Entity_RequiredAssociationNotAllowed">
            <summary>
              Looks up a localized string similar to Association &apos;{0}.{1}&apos; is marked with RequiredAttribute. Please remove the attribute and mark the underlying foreign key members with RequiredAttribute instead..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.EntityTypes_Cannot_Be_Collections">
            <summary>
              Looks up a localized string similar to Entity types cannot be a collection type..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.EntityTypes_Cannot_Be_Generic">
            <summary>
              Looks up a localized string similar to Entity types cannot be generic..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.EntityTypes_Cannot_Be_Nullable">
            <summary>
              Looks up a localized string similar to Entity types cannot be nullable..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.EntityTypes_Cannot_Be_Primitives">
            <summary>
              Looks up a localized string similar to Entity types cannot be a primitive type or a simple type like string or Guid..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.EntityTypes_Must_Be_Public">
            <summary>
              Looks up a localized string similar to Entity types must be public..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.EntityTypes_Must_Have_Default_Constructor">
            <summary>
              Looks up a localized string similar to Entity types must have a default constructor..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.IncorrectParameterType">
            <summary>
              Looks up a localized string similar to Incorrect parameter type &apos;{0}&apos; for parameter &apos;{1}&apos;. Expected type is &apos;{2}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Invalid_Entity_Property">
            <summary>
              Looks up a localized string similar to Entity &apos;{0}&apos; has a property &apos;{1}&apos; with an unsupported type..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Invalid_Entity_Type">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is not a valid entity type.  {1}.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Invalid_Exclude_Property_Concurency_Conflict">
            <summary>
              Looks up a localized string similar to Member &apos;{0}.{1}&apos; is an optimistic concurrency check member, but is either excluded or non-serializable..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Invalid_Include_Invalid_Entity">
            <summary>
              Looks up a localized string similar to The property &apos;{0}&apos; in entity type &apos;{1}&apos; cannot be marked with the IncludeAttribute because &apos;{2}&apos; is not a valid entity type.  {3}.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_FKNotSingleton">
            <summary>
              Looks up a localized string similar to Association &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid. It is a foreign key association but the property type is not a singleton..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_IsFKInvalid">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: one and only one side of the association must have IsForeignKey set to true..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_Key_Count_Mismatch">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: the number of keys in &apos;{2}&apos; does not match the number in &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_NameCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Association defined on property &apos;{0}&apos; of entity &apos;{1}&apos; is invalid: Name cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_NonUniqueAssociationName">
            <summary>
              Looks up a localized string similar to Association name &apos;{0}&apos; defined on entity type &apos;{1}&apos; is not unique..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_OtherKeyNotFound">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: OtherKey property named &apos;{2}&apos; cannot be found on entity type &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_RoundTripOriginal">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: Association members cannot be marked with RoundtripOriginalAttribute..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_StringCannotBeNullOrEmpty">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: {2} cannot be null or empty..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_ThisKeyNotFound">
            <summary>
              Looks up a localized string similar to Association named &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid: ThisKey property named &apos;{2}&apos; cannot be found..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidAssociation_TypesDoNotAlign">
            <summary>
              Looks up a localized string similar to Association &apos;{0}&apos; defined on entity type &apos;{1}&apos; is invalid. The corresponding association on &apos;{2}&apos; is not a valid back reference..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeSet">
            <summary>
              Looks up a localized string similar to Invalid ChangeSet : {0}.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeSet_AssociatedIdNotInChangeset">
            <summary>
              Looks up a localized string similar to Id &apos;{0}&apos; specified for association member  &apos;{0}.{1}&apos; is invalid..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeSet_AssociatedIdsCannotBeNull">
            <summary>
              Looks up a localized string similar to Associated Ids for member &apos;{0}.{1}&apos; cannot be null..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeSet_DuplicateEntity">
            <summary>
              Looks up a localized string similar to Only one entry for a given entity instance can exist in the ChangeSet..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeSet_DuplicateId">
            <summary>
              Looks up a localized string similar to Id must be unique for each entry..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeSet_InsertsCantHaveOriginal">
            <summary>
              Looks up a localized string similar to OriginalEntity cannot be specified for an Insert operation..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeSet_InvalidAssociationMember">
            <summary>
              Looks up a localized string similar to Association member &apos;{0}.{1}&apos; specified in the ChangeSet does not exist or is not marked with AssociationAttribute..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeSet_MustBeSameType">
            <summary>
              Looks up a localized string similar to Entity and OriginalEntity must be of the same type..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeSet_NullEntity">
            <summary>
              Looks up a localized string similar to Entity cannot be null..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidChangeset_UpdateChildWithoutParent">
            <summary>
              Looks up a localized string similar to Child entity of type &apos;{0}&apos; cannot be updated independent of its parent..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidComplexType_AssociationMember">
            <summary>
              Looks up a localized string similar to Complex types cannot have association members..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidComplexType_CompositionMember">
            <summary>
              Looks up a localized string similar to Complex types cannot have composition members..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidComplexType_EntityInheritance">
            <summary>
              Looks up a localized string similar to DomainService &apos;{0}&apos; exposes both entity type &apos;{1}&apos; and complex type &apos;{2}&apos; which share an inheritance relationship. Entities cannot derive from complex types..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidComplexType_IncludeMember">
            <summary>
              Looks up a localized string similar to Complex types cannot have include members..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidComplexType_Inheritance">
            <summary>
              Looks up a localized string similar to DomainService &apos;{0}&apos; exposes both complex type &apos;{1}&apos; and complex type &apos;{2}&apos; which share an inheritance relationship. Only one complex type in an inheritance hierarchy can be exposed from a domain service..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidComplexType_KnownTypes">
            <summary>
              Looks up a localized string similar to Complex type &apos;{0}&apos; is invalid. Complex types cannot specify a KnownTypeAttribute..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidComplexType_PropertyAttribute">
            <summary>
              Looks up a localized string similar to Property &apos;{0}&apos; of complex type &apos;{1}&apos; is invalid. {2}.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidCustomMethod_MethodCannotBeParameterless">
            <summary>
              Looks up a localized string similar to Custom methods must contain at least one parameter..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidDomainMethod_ParamMustBeEntity">
            <summary>
              Looks up a localized string similar to Parameter &apos;{0}&apos; of domain method &apos;{1}&apos; must be an entity type exposed by the DomainService. The entity type can be exposed either directly in a query operation, or indirectly through an association..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidDomainOperationEntry_InvalidQueryOperationReturnType">
            <summary>
              Looks up a localized string similar to Invalid return type &apos;{0}&apos; for query method &apos;{1}&apos;. Query methods must have a return type that implements IEnumerable of T or must return a singleton..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidDomainOperationEntry_NonQueryMustReturnVoid">
            <summary>
              Looks up a localized string similar to DomainOperationEntry &apos;{0}&apos; is not a Query operation so it cannot return a value..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidDomainOperationEntry_ParamMustBeByVal">
            <summary>
              Looks up a localized string similar to Parameter &apos;{1}&apos; of domain operation entry &apos;{0}&apos; must be passed by value..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidDomainOperationEntry_ParamMustBeSimple">
            <summary>
              Looks up a localized string similar to Parameter &apos;{1}&apos; of domain operation entry &apos;{0}&apos; must be one of the predefined serializable types..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidDomainOperationEntryType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid DomainOperation type for a DomainOperationEntry..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidDomainOperationType">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid DomainOperation type for a ChangeSetEntry..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidExternal_NonAssociationMember">
            <summary>
              Looks up a localized string similar to Invalid External specification for member &apos;{0}.{1}&apos;. ExternalReferenceAttribute can only be specified on members with the AssociationAttribute applied..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidInclude_NonAssociationMember">
            <summary>
              Looks up a localized string similar to Invalid Include specification for member &apos;{0}.{1}&apos;. Non-projection includes can only be specified on members with the AssociationAttribute applied..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidInsertUpdateDeleteMethod_IncorrectParameterLength">
            <summary>
              Looks up a localized string similar to Domain operation entry &apos;{0}&apos; must take exactly one parameter..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidInvokeOperation_ParameterType">
            <summary>
              Looks up a localized string similar to Operation named &apos;{0}&apos; does not conform to the required signature. Parameter types must be an entity or complex type, a collection of entities or complex types, or one of the predefined serializable types..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidInvokeOperation_ReturnType">
            <summary>
              Looks up a localized string similar to Operation named &apos;{0}&apos; does not conform to the required signature. Return types must be an entity or complex type, a collection of entities or complex types, or one of the predefined serializable types..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidMemberProjection_EmptyMemberName">
            <summary>
              Looks up a localized string similar to Invalid member projection specification : MemberName cannot be empty..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidMemberProjection_EmptyPath">
            <summary>
              Looks up a localized string similar to Invalid member projection specification : Path cannot be empty..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidMemberProjection_InvalidProjectedType">
            <summary>
              Looks up a localized string similar to Invalid member projection specification : The type of member &apos;{0}.{1}&apos; projected from member &apos;{2}.{3}&apos; is not one of the predefined serializable types..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidMemberProjection_Path">
            <summary>
              Looks up a localized string similar to Invalid member projection specification : Projection path &apos;{0}&apos; is invalid for member &apos;{1}.{2}&apos;. Please verify that the &apos;Path&apos; value specified in the IncludeAttribute on this member is correct. .
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.InvalidType">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; does not derive from &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.KnownTypeAttributeRequired">
            <summary>
              Looks up a localized string similar to The derived entity type &apos;{0}&apos; must be declared in a KnownTypeAttribute on the root entity &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.KnownTypeAttributeRequired_Abstract">
            <summary>
              Looks up a localized string similar to The entity type &apos;{0}&apos; in the DomainService &apos;{1}&apos; is abstract and must use a KnownTypeAttribute to specify at least one non-abstract derived type..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.MemberNotAComposition">
            <summary>
              Looks up a localized string similar to Member &apos;{0}.{1}&apos; is not an compositional association member marked with CompositionAttribute..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.MemberNotAnAssociation">
            <summary>
              Looks up a localized string similar to Member &apos;{0}.{1}&apos; is not an association member marked with AssociationAttribute..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.Method_Parameter_Count_Wrong">
            <summary>
              Looks up a localized string similar to Method &apos;{0}&apos; requires {1} parameters..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.RequiresRoleAttribute_MustSpecifyRole">
            <summary>
              Looks up a localized string similar to One or more roles must be specified..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ValidationUtilities_AmbiguousMatch">
            <summary>
              Looks up a localized string similar to Ambiguous match for method &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ValidationUtilities_ContextInstance_CannotBeNull">
            <summary>
              Looks up a localized string similar to ValidationContext.ObjectInstance cannot be null..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ValidationUtilities_MethodNotFound">
            <summary>
              Looks up a localized string similar to Method &apos;{0}.{1}({3})&apos; could not be found. Parameter count: {2}..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resource.ValidationUtilities_MethodNotFound_ZeroParams">
            <summary>
              Looks up a localized string similar to Method &apos;{0}.{1}&apos; accepting zero parameters could not be found..
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.QueryComposer">
            <summary>
            Used to compose two separate queries into a single query
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.QueryComposer.Compose(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>
            Composes the specified query with the source provided.
            </summary>
            <param name="source">The root or source query</param>
            <param name="query">The query to compose</param>
            <returns>The composed query</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.QueryComposer.TryComposeWithoutPaging(System.Linq.IQueryable,System.Linq.IQueryable@)">
            <summary>
            Inspects the specified query and if the query has any paging operators
            at the end of it (either a single Take or a Skip/Take) the underlying
            query w/o the Skip/Take is returned.
            </summary>
            <param name="query">The query to inspect.</param>
            <param name="countQuery">The resulting count query. Null if there is no paging.</param>
            <returns>True if a count query is returned, false otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.QueryComposer.TryComposeWithLimit(System.Collections.IEnumerable,System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Collections.IEnumerable@)">
            <summary>
            If the query operation has a result limit, this operation will compose Take(limit) on top 
            of the specified results.
            </summary>
            <param name="results">The results that may need to be limited.</param>
            <param name="queryOperation">The query operation that was invoked to get the results.</param>
            <param name="limitedResults">The limited results. It will be <value>null</value> if there is no result limit.</param>
            <returns>True if a limited result query is returned, false otherwise.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.QueryComposer.QueryRebaser">
            <summary>
            Class used to insert a specified query source into another separate
            query, effectively "rebasing" the query source.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.QueryComposer.QueryRebaser.Rebase(System.Linq.IQueryable,System.Linq.IQueryable)">
            <summary>
            Rebase the specified query to the specified source
            </summary>
            <param name="source">The query source</param>
            <param name="query">The query to rebase</param>
            <returns>Returns the edited query.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions">
            <summary>
            Extension methods for TypeDescriptors
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions.ExplicitAttributes(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Extension method to extract only the explicitly specified attributes from a <see cref="T:System.ComponentModel.PropertyDescriptor"/>.
            </summary>
            <remarks>
            Normal TypeDescriptor semantics are to inherit the attributes of a property's type.  This method
            exists to suppress those inherited attributes.
            </remarks>
            <param name="propertyDescriptor">The property descriptor whose attributes are needed.</param>
            <returns>A new <see cref="T:System.ComponentModel.AttributeCollection"/> stripped of any attributes from the property's type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions.Attributes(System.Type)">
            <summary>
            Extension method to extract attributes from a type taking into account the inheritance type of attributes
            </summary>
            <remarks>
            Normal TypeDescriptor semantics are to inherit the attributes of a type's base type, regardless of their 
            inheritance type.
            </remarks>
            <param name="type">The type whose attributes are needed.</param>
            <returns>A new <see cref="T:System.ComponentModel.AttributeCollection"/> stripped of any incorrectly inherited attributes from the type.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.TypeDescriptorExtensions.ContainsAttributeType``1(System.ComponentModel.AttributeCollection)">
            <summary>
            Checks to see if an attribute collection contains any attributes of the provided type.
            </summary>
            <typeparam name="TAttribute">The attribute type to check for</typeparam>
            <param name="attributes">The attribute collection to inspect</param>
            <returns><c>True</c> if an attribute of the provided type is contained in the attribute collection.</returns>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1">
            <summary>
            <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> that encapsulates the authentication domain.
            </summary>
            <remarks>
            The default <c>AuthenticationService</c> on the client will work with the
            <c>DomainContext</c> generated for any domain service extending this class.
            <para>
            <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.UpdateUser(`0)"/> is designed as an update method, and will be invoked via
            <c>SubmitChanges</c> on the client. This has a couple implications. First,
            invoking <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.UpdateUser(`0)"/> via <c>AuthenticationService.SaveUser</c> will submit all 
            changes that have occurred in the <c>DomainContext</c> and may invoke other update methods.
            Second, invoking other update methods on the <c>DomainContext</c> from the client will submit
            all changes and may invoke <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.UpdateUser(`0)"/>.
            </para>
            <para>
            By default, this domain service relies on the ASP.NET providers for
            <c>Membership, Roles, and Profile</c> and will reflect the customizations made in
            each.
            </para>
            </remarks>
            <typeparam name="T">The type of the user entity</typeparam>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1">
            <summary>
            An interface for a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> that encapsulates the authentication domain. A
            domain service implementing this interface will be used to populate the user on the client.
            </summary>
            <remarks>
            <c>System.ServiceModel.DomainServices.Client.ApplicationServices.WebAuthenticationService</c>
            will work with the <c>DomainContext</c> generated for any domain service implementing this
            interface.
            <para>
            <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.UpdateUser(`0)"/> is designed as an update method, and will be invoked via
            <c>SubmitChanges</c> on the client. This has a couple implications. First,
            invoking <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.UpdateUser(`0)"/> via <c>AuthenticationService.SaveUser</c> will submit all 
            changes that have occurred in the <c>DomainContext</c> and may invoke other update methods.
            Second, invoking other update methods on the <c>DomainContext</c> from the client will submit
            all changes and may invoke <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.UpdateUser(`0)"/>.
            </para>
            </remarks>
            <typeparam name="T">The type of the user entity</typeparam>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.Login(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Authenticates and returns the user with the specified name and password.
            </summary>
            <remarks>
            This method will return a single user if the 
            authentication was successful. If the user could not be authenticated, <c>null</c>
            will be returned.
            </remarks>
            <param name="userName">The userName associated with the user to authenticate</param>
            <param name="password">The password associated with the user to authenticate</param>
            <param name="isPersistent">Whether the authentication should persist between sessions</param>
            <param name="customData">Optional implementation-specific data</param>
            <returns>A single user or <c>null</c> if authentication failed</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.Logout">
            <summary>
            Logs an authenticated user out.
            </summary>
            <remarks>
            This method will return a single, anonymous user.
            </remarks>
            <returns>A single, default user.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.GetUser">
            <summary>
            Gets the principal and profile for the current user.
            </summary>
            <remarks>
            This method will return a single user. If the user is not
            authenticated, an anonymous user will be returned.
            </remarks>
            <returns>An enumerable with a single user.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.UpdateUser(`0)">
            <summary>
            Updates the profile for the authenticated user.
            </summary>
            <param name="user">The updated user</param>
            <exception cref="T:System.UnauthorizedAccessException"> is thrown if the authenticated 
            user does not have the correct permissions to update the profile.
            </exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1"/> class.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetProfile(`0)">
            <summary>
            Gets the profile settings for the current user from the <see cref="T:System.Web.Profile.ProfileBase"/>
            and sets them into the specified <paramref name="user"/>.
            </summary>
            <remarks>
            The <paramref name="user"/> is updated from the profile using the following algorithm.
            <para>
            For every property in <paramref name="user"/>:
             if (the property can be set and is in the profile)
              then set the property value using the value in the profile specified by the alias
            </para>
            </remarks>
            <param name="user">The user to update with the profile settings</param>
            <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"> is thrown if a property in 
            <paramref name="user"/> that meets the specified conditions does not have a
            corresponding profile value.
            </exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.UpdateProfile(`0)">
            <summary>
            Writes the profile settings for the current user to the <see cref="T:System.Web.Profile.ProfileBase"/>
            using the specified <paramref name="user"/>.
            </summary>
            <remarks>
            The profile is updated from the <paramref name="user"/> using the following algorithm.
            <para>
            For every property in <paramref name="user"/>:
             if (the property can be read and is in the profile)
              then use the property value to set the value in the profile specified by the alias
            </para>
            </remarks>
            <param name="user">The user to update the profile settings with</param>
            <exception cref="T:System.Runtime.Serialization.InvalidDataContractException"> is thrown if a property in 
            <paramref name="user"/> that meets the specified conditions does not have a
            corresponding profile value.
            </exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.CheckAuthenticationMode">
            <summary>
            Checks that the ASP.NET authentication mode is forms and throws if it is
            not.
            </summary>
            <exception cref="T:System.InvalidOperationException"> is thrown if the ASP.NET 
            authentication mode is not <see cref="F:System.Web.Configuration.AuthenticationMode.Forms"/>.
            </exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetProfileUsage(System.Reflection.PropertyInfo)">
            <summary>
            Gets the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute"/> for the specified property.
            </summary>
            <param name="propertyInfo">The property to get the attribute for</param>
            <returns>The attribute or null if one does not exist</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.IsInProfile(System.Reflection.PropertyInfo)">
            <summary>
            Returns a value indicating whether the specified property has a backing member in
            the ASP.NET profile.
            </summary>
            <param name="propertyInfo">The property to make the determination for</param>
            <returns>Whether the property is in the profile</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetProfileAlias(System.Reflection.PropertyInfo)">
            <summary>
            Gets the profile alias for the specified property.
            </summary>
            <remarks>
            This is either:
            <para>
            1) <see cref="P:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute.Alias"/> when the property is marked with the attribute.
            2) <see cref="P:System.Reflection.MemberInfo.Name"/> for the specified property.
            </para>
            </remarks>
            <param name="propertyInfo">The property to get the profile alias for</param>
            <returns>The profile alias for the specified property</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.IsReadOnly(System.Reflection.PropertyInfo)">
            <summary>
            Returns a value indicating whether the specified property is read-only.
            </summary>
            <remarks>
            This method determines read only state by checking for appropriately configured
            <see cref="T:System.ComponentModel.DataAnnotations.EditableAttribute"/>s.
            </remarks>
            <param name="propertyInfo">The property to determine whether it is read-only</param>
            <returns><c>true</c> if the property is marked read-only; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetPrincipal">
            <summary>
            Gets the current principal from <see cref="T:System.Web.HttpContext"/> or returns
            a default value.
            </summary>
            <returns>The current principal</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetProfileBase(System.String)">
            <summary>
            Gets the profile for the current identity from <see cref="T:System.Web.HttpContext"/> or returns
            a profile base for the specified user.
            </summary>
            <param name="userName">The name for the user to get the profile for</param>
            <returns>The current profile</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetRoles(System.String)">
            <summary>
            Gets the roles for the specified identity from <see cref="T:System.Web.Security.Roles"/> or returns
            a default enumerable.
            </summary>
            <param name="userName">The userName associated with the identity to get the
            roles for</param>
            <returns>The roles for the specified identity</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.Login(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Authenticates and returns the user with the specified name and password.
            </summary>
            <remarks>
            This method will return a single user if the 
            authentication was successful. If the user could not be authenticated, <c>null</c>
            will be returned.
            <para>
            By default, this method can be only used for forms authentication and leverages
            ASP.NET <see cref="T:System.Web.Security.Membership"/> and <see cref="T:System.Web.Security.FormsAuthentication"/>.
            </para>
            </remarks>
            <param name="userName">The userName associated with the user to authenticate</param>
            <param name="password">The password associated with the user to authenticate</param>
            <param name="isPersistent">Whether the authentication should persist between sessions</param>
            <param name="customData">Optional implementation-specific data. It is unused by this base class.</param>
            <returns>A single user or <c>null</c> if authentication failed</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the ASP.NET 
            authentication mode is not <see cref="F:System.Web.Configuration.AuthenticationMode.Forms"/>.
            </exception>
            <seealso cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetUser"/>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.Logout">
            <summary>
            Logs an authenticated user out.
            </summary>
            <remarks>
            This method will return a single, anonymous user.
            <para>
            By default, this method can only be used for forms authentication and leverages
            ASP.NET <see cref="T:System.Web.Security.FormsAuthentication"/>.
            </para>
            </remarks>
            <returns>A single, default user.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if the ASP.NET 
            authentication mode is not <see cref="F:System.Web.Configuration.AuthenticationMode.Forms"/>.
            </exception>
            <seealso cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetUser"/>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetUser">
            <summary>
            Gets the principal and profile for the current user.
            </summary>
            <remarks>
            This method will return an enumerable containing a single user. If the user is not
            authenticated, an anonymous user will be returned.
            <para>
            By default, the user is populated with data from <see cref="T:System.Web.HttpContext"/>,
            <see cref="T:System.Web.Security.Roles"/>, and <see cref="T:System.Web.Profile.ProfileBase"/>.
            </para>
            <para>
            In updating the user from the profile, this service copies the corresponding
            profile value into each property in <typeparamref name="T"/>. This behavior 
            can be tailored by marking specified properties with the
            <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute"/>.
            </para>
            </remarks>
            <returns>An enumerable with a single user.</returns>
            <seealso cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute"/>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.UpdateUser(`0)">
            <summary>
            Updates the profile for the authenticated user.
            </summary>
            <remarks>
            By default, the user is persisted to the <see cref="T:System.Web.Profile.ProfileBase"/>.
            <para>
            In writing the user to the profile, this service copies each property in 
            <typeparamref name="T"/> into the corresponding value in the profile. This behavior
            can be tailored by marking specified properties with the 
            <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute"/>.
            </para>
            </remarks>
            <param name="user">The updated user</param>
            <exception cref="T:System.UnauthorizedAccessException"> is thrown if the authenticated 
            user does not have the correct permissions to update the profile.
            </exception>
            <seealso cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute"/>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.ValidateUser(System.String,System.String)">
            <summary>
            Verifies that the supplied user name and password are valid.
            </summary>
            <remarks>
            This method is invoked from <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.Login(System.String,System.String,System.Boolean,System.String)"/>. By default, it delegates to
            <see cref="M:System.Web.Security.Membership.ValidateUser(System.String,System.String)"/>. The base implementation does not need
            to be invoked when this method is overridden.
            </remarks>
            <param name="userName">The name of the user to be validated</param>
            <param name="password">The password for the specified user</param>
            <returns>A value indicating whether the user is valid</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.IssueAuthenticationToken(System.Security.Principal.IPrincipal,System.Boolean)">
            <summary>
            Issues a token for the authenticated principal.
            </summary>
            <remarks>
            This method is invoked from <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.Login(System.String,System.String,System.Boolean,System.String)"/> when the user is authenticated.
            By default, the method will issue a token by leveraging the cookie support
            in <see cref="T:System.Web.Security.FormsAuthentication"/>. The base implementation does not need to
            be invoked when this method is overridden.
            </remarks>
            <param name="principal">The authenticated principal</param>
            <param name="isPersistent">Whether the token should persist between sessions</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.ClearAuthenticationToken">
            <summary>
            Clears any issued authentication token.
            </summary>
            <remarks>
            This method is invoked from <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.Logout"/>. By default, the method will
            clear tokens by leveraging the cookie support in <see cref="T:System.Web.Security.FormsAuthentication"/>.
            The base implementation does not need to be invoked when this method is overridden.
            </remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetUserCore(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the user for the specified principal.
            </summary>
            <remarks>
            This method will return a single user. If the user is not authenticated, an
            anonymous user will be returned.
            </remarks>
            <param name="principal">The principal to get the user for</param>
            <returns>A single user.</returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetAuthenticatedUser(System.Security.Principal.IPrincipal)"/>
            or <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetAnonymousUser"/> returns <c>null</c>.
            </exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetAuthenticatedUser(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the user for the authenticated principal.
            </summary>
            <remarks>
            This method is invoked from <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.Login(System.String,System.String,System.Boolean,System.String)"/> and <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetUser"/> for
            authenticated users. By default, the user is populated with data from 
            <paramref name="principal"/>, <see cref="T:System.Web.Security.Roles"/>, and <see cref="T:System.Web.Profile.ProfileBase"/>.
            The base implementation does not need to be invoked when this method is overridden.
            </remarks>
            <param name="principal">The principal to get the user for</param>
            <returns>The user for the authenticated principal. This should never be <c>null</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.CreateUser"/>
            returns <c>null</c>.
            </exception>
            <seealso cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetUser"/>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetAnonymousUser">
            <summary>
            Gets an anonymous user.
            </summary>
            <remarks>
            This method is invoked from <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.Logout"/> and <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetUser"/> for
            anonymous users. By default, the user is populated with data from 
            <see cref="T:System.Web.Security.Roles"/>, and <see cref="T:System.Web.Profile.ProfileBase"/>.
            The base implementation does not need to be invoked when this method is overridden.
            </remarks>
            <returns>The anonymous user. This should never be <c>null</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException"> is thrown if <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.CreateUser"/>
            returns <c>null</c>.
            </exception>
            <seealso cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetUser"/>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetUserImpl(System.Security.Principal.IPrincipal)">
            <summary>
            Gets the user for the specified principal.
            </summary>
            <remarks>
            The user is populated with data from <paramref name="principal"/>,
            <see cref="T:System.Web.Security.Roles"/>, and <see cref="T:System.Web.Profile.ProfileBase"/>.
            </remarks>
            <param name="principal">The principal to get the user for</param>
            <returns>The user for the specified principal</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.CreateUser">
            <summary>
            Creates a new instance of <typeparamref name="T"/> and initializes it
            with default values. 
            </summary>
            <remarks>
            This method is invoked from <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetAuthenticatedUser(System.Security.Principal.IPrincipal)"/> and
            <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.GetAnonymousUser"/>. By default, it returns an instance
            created with the default constructor. The base implementation does not
            need to be invoked when this method is overridden.
            </remarks>
            <returns>A new instance of <typeparamref name="T"/></returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.UpdateUserCore(`0)">
            <summary>
            Updates the user data for the authenticated identity.
            </summary>
            <remarks>
            This method is invoked from <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1.UpdateUser(`0)"/> after the identity of the
            current principal has been verified. It is responsible for persisting the 
            updated user data. By default, this method will persist the user using
            <see cref="T:System.Web.Profile.ProfileBase"/>. The base implementation does not need to be invoked 
            when this method is overridden.
            </remarks>
            <param name="user">The updated user data</param>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor">
            <summary>
            <see cref="T:System.ServiceModel.DomainServices.Server.CodeProcessor"/> implementation that sets the base class of both the
            context and entity types generated by a provider implementing
            <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/>.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor.#ctor(System.CodeDom.Compiler.CodeDomProvider)">
            <summary>
            Initializes an instance of the AuthenticationCodeProcessor class.
            </summary>
            <param name="codeDomProvider">The <see cref="T:System.CodeDom.Compiler.CodeDomProvider"/> used during <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> code generation.</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor.ProcessGeneratedCode(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.CodeDom.CodeCompileUnit,System.Collections.Generic.IDictionary{System.Type,System.CodeDom.CodeTypeDeclaration})">
            <summary>
            See <see cref="M:System.ServiceModel.DomainServices.Server.CodeProcessor.ProcessGeneratedCode(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.CodeDom.CodeCompileUnit,System.Collections.Generic.IDictionary{System.Type,System.CodeDom.CodeTypeDeclaration})"/>.
            </summary>
            <param name="domainServiceDescription">The domainServiceDescription</param>
            <param name="codeCompileUnit">The codeCompileUnit</param>
            <param name="typeMapping">The typeMapping</param>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor.GetDocComments(System.String)">
            <summary>
            Takes a multi-line comment defined in a resource file and correctly formats it as a doc comment
            for use in code-dom.
            </summary>
            <param name="resourceComment">The comment to format as a doc comment. This cannot be null.</param>
            <returns>A collection of comment statements that matches the input resource</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor.CheckIAuthentication(System.ServiceModel.DomainServices.Server.DomainServiceDescription,System.Type@)">
            <summary>
            Validates that the authentication service implements the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/> interface 
            naturally for use in codegen.
            </summary>
            <remarks>
            This check ensures no part of the interface was implemented explicitly.
            </remarks>
            <param name="authenticationServiceDescription">The domain service description for the type that implemented 
            the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/> interface.
            </param>
            <param name="genericIAuthenticationType">The generic version of <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/> implemented
            by the service type of the <paramref name="authenticationServiceDescription"/>.
            </param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/> interface
            is not correctly implemented.
            </exception>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor.CheckIAuthenticationLogin(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Type)">
            <summary>
            Validates that the operation entry represents <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.Login(System.String,System.String,System.Boolean,System.String)"/> for use in codegen.
            </summary>
            <param name="doe">The entry to validate</param>
            <param name="userType">The user type. <c>T</c> in <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/>.</param>
            <returns>Whether the operation entry represents Login</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor.CheckIAuthenticationLogout(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Type)">
            <summary>
            Validates that the operation entry represents <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.Logout"/> for use in codegen.
            </summary>
            <param name="doe">The entry to validate</param>
            <param name="userType">The user type. <c>T</c> in <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/>.</param>
            <returns>Whether the operation entry represents Logout</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor.CheckIAuthenticationGetUser(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Type)">
            <summary>
            Validates that the operation entry represents <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.GetUser"/> for use in codegen.
            </summary>
            <param name="doe">The entry to validate</param>
            <param name="userType">The user type. <c>T</c> in <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/>.</param>
            <returns>Whether the operation entry represents GetUser</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor.CheckIAuthenticationUpdateUser(System.ServiceModel.DomainServices.Server.DomainOperationEntry,System.Type)">
            <summary>
            Validates that the operation entry represents <see cref="M:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1.UpdateUser(`0)"/> for use in codegen.
            </summary>
            <param name="doe">The entry to validate</param>
            <param name="userType">The user type. <c>T</c> in <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/>.</param>
            <returns>Whether the operation entry represents UpdateUser</returns>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor.CheckIUser(System.Type)">
            <summary>
            Validates that the user type implements the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IUser"/> interface naturally for use
            in codegen.
            </summary>
            <remarks>
            This check ensures no part of the interface was implemented explicitly and the <c>Name</c>
            property was marked as a <c>[Key]</c>.
            </remarks>
            <param name="user">The type that implemented the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IUser"/> interface.</param>
            <exception cref="T:System.InvalidOperationException"> is thrown if the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IUser"/> interface
            is not correctly implemented.
            </exception>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationServiceAttribute">
            <summary>
            Attribute that marks a <see cref="T:System.ServiceModel.DomainServices.Server.DomainService"/> as an authentication service.
            </summary>
            <remarks>
            This attribute is used to associate the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationCodeProcessor"/> with
            an implementation of the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/> interface.
            </remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationServiceAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationServiceAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IUser">
            <summary>
            Interface for user entities that has properties for passing principal values to the client.
            </summary>
            <remarks>
            This class is designed for use with the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.IAuthentication`1"/> interface.
            It provides properties to support serialization of principal values to an entity class
            generated from a type implementing this interface.
            </remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ApplicationServices.IUser.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <remarks>
            <see cref="P:System.ServiceModel.DomainServices.Server.ApplicationServices.IUser.Name"/> may be null or empty to support anonymous users.
            </remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ApplicationServices.IUser.Roles">
            <summary>
            Gets or sets the roles the user is a member of.
            </summary>
            <remarks>
            <see cref="P:System.ServiceModel.DomainServices.Server.ApplicationServices.IUser.Roles"/> may be <c>null</c>.
            </remarks>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute">
            <summary>
            Attribute that describes how a property is backed in an ASP.NET profile. It can 
            be used with user entities extending <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase"/>.
            </summary>
            <remarks>
            This attribute is used by the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1"/> to determine
            how it should read from or write to the ASP.NET profile that backs the data.
            If a property is in the profile with the same name, then this attribute does not
            need to be used. If a property is not in the profile then <see cref="P:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute.IsExcluded"/>
            should be set to <c>true</c>. If a property has been named differently than the
            profile value that backs it, then <see cref="P:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute.Alias"/> should be set to the name
            of the backing value in the profile.
            </remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute"/> class
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute.Alias">
            <summary>
            Gets or sets the name of the member backing the property in an ASP.NET profile.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ApplicationServices.ProfileUsageAttribute.IsExcluded">
            <summary>
            Gets or sets a value indicating whether the property is backed by a profile member
            </summary>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase">
            <summary>
            Base class for user entities that has properties for passing principal values to the client.
            </summary>
            <remarks>
            This class provides properties to support serialization of principal values to the
            <c>DomainContext</c> generated for any domain service extending <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.AuthenticationBase`1"/>.
            It also presents those values via the <see cref="T:System.Security.Principal.IPrincipal"/> and <see cref="T:System.Security.Principal.IIdentity"/> interfaces 
            for use in shared authorization scenarios.
            </remarks>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase"/> class.
            </summary>
        </member>
        <member name="M:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase.IsInRole(System.String)">
            <summary>
            Determines whether the current user belongs to the specified role.
            </summary>
            <remarks>
            Returns whether the specified role is contained in <see cref="P:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase.Roles"/>.
            This implementation is case sensitive.  See <see cref="M:System.Security.Principal.IPrincipal.IsInRole(System.String)"/>.
            </remarks>
            <param name="role">The name of the role for which to check membership.</param>
            <returns><c>true</c> if the current user is a member of the specified role;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase.IsAuthenticated">
            <summary>
            Gets a value indicating whether the user is authenticated. See
            <see cref="P:System.Security.Principal.IIdentity.IsAuthenticated"/>.
            </summary>
            <remarks>
            This value is true if <see cref="P:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase.Name"/> is not <c>null</c> or empty. This is the
            same implementation as <see cref="P:System.Security.Principal.GenericIdentity.IsAuthenticated"/>.
            </remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase.Name">
            <summary>
            Gets or sets the name. See <see cref="P:System.Security.Principal.IIdentity.Name"/>.
            </summary>
            <remarks>
            The value is <c>null</c> by default, but must be set to a non-<c>null</c> value
            before it is serialized.
            </remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase.Roles">
            <summary>
            Gets or sets the roles the user is a member of.
            </summary>
            <remarks>
            This value may be <c>null</c>. The value is <c>null</c> by default.
            </remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase.System#Security#Principal#IPrincipal#Identity">
            <summary>
            Gets the identity. See <see cref="P:System.Security.Principal.IPrincipal.Identity"/>.
            </summary>
            <remarks>
            This value is never <c>null</c>.
            </remarks>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.ApplicationServices.UserBase.System#Security#Principal#IIdentity#AuthenticationType">
            <summary>
            Gets the authentication type. See <see cref="P:System.Security.Principal.IIdentity.AuthenticationType"/>.
            </summary>
            <remarks>
            The value is an empty string by default.
            </remarks>
        </member>
        <member name="T:System.ServiceModel.DomainServices.Server.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_CommentIsAuth">
             <summary>
               Looks up a localized string similar to &lt;summary&gt;
            Gets a value indicating whether the identity is authenticated.
            &lt;/summary&gt;
            &lt;remarks&gt;
            This value is &lt;c&gt;true&lt;/c&gt; if &lt;see cref=&quot;Name&quot;/&gt; is not &lt;c&gt;null&lt;/c&gt; or empty.
            &lt;/remarks&gt;.
             </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_CommentIsInRole">
             <summary>
               Looks up a localized string similar to &lt;summary&gt;
            Return whether the principal is in the role.
            &lt;/summary&gt;
            &lt;remarks&gt;
            Returns whether the specified role is contained in the roles.
            This implementation is case sensitive.
            &lt;/remarks&gt;
            &lt;param name=&quot;role&quot;&gt;The name of the role for which to check membership.&lt;/param&gt;
            &lt;returns&gt;Whether the principal is in the role.&lt;/returns&gt;.
             </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_CreateUserCannotBeNull">
            <summary>
              Looks up a localized string similar to The user returned from {0}.CreateUser() cannot be null..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_GetUserCannotBeNull">
            <summary>
              Looks up a localized string similar to The user returned from {0}.GetUser(IIdentity) or {0}.GetAnonymousUser() cannot be null..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_LoginLogoutOnlyForForms">
            <summary>
              Looks up a localized string similar to Login and Logout can only be invoked for Forms authentication..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_MustBeIAuth">
            <summary>
              Looks up a localized string similar to The AuthenticationServiceAttribute can only be applied to DomainServices that implement the IAuthentication&lt;&gt; interface..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_MustBeIAuthImpl">
            <summary>
              Looks up a localized string similar to The {0} type must not implement IAuthentication&lt;&gt; explicitly and each method must be included in the generated context..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_MustBeIUser">
            <summary>
              Looks up a localized string similar to The {0} type must not implement IUser explicitly..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_MustBeSerializable">
            <summary>
              Looks up a localized string similar to The {0} member in {1} must be included in the generated entity..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_NameMustBeAKey">
            <summary>
              Looks up a localized string similar to The Name property in {0} must be marked with the KeyAttribute..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_ProfilePropertyDoesNotExist">
            <summary>
              Looks up a localized string similar to A profile property does not exist for {0}..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_ProfilePropertyReadOnly">
            <summary>
              Looks up a localized string similar to The profile property is ReadOnly for {0}..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_ProfilePropertyTypeMismatch">
            <summary>
              Looks up a localized string similar to The profile property type of {0} is different from the property type..
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_ProviderError">
            <summary>
              Looks up a localized string similar to There was a failure using the default &apos;{0}Provider&apos;. Please make sure it is configured correctly. {1}.
            </summary>
        </member>
        <member name="P:System.ServiceModel.DomainServices.Server.Resources.ApplicationServices_UnauthorizedUpdate">
            <summary>
              Looks up a localized string similar to The user cannot be updated. Users are only allowed to modify their own profile..
            </summary>
        </member>
    </members>
</doc>
